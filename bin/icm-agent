#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2005-2006 Insecure.Com LLC.
# Copyright (C) 2007-2008 Adriano Monteiro Marques
#
# Authors: Zhongjie Wang <wzj401@gmail.com>
#          Tianwei Liu <liutianweidlut@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import os
import sys
import signal
import platform
import tempfile
import cgitb
    
# find root directory
if not hasattr(sys,"frozen"):
    ROOT_DIR = os.path.abspath(
                        os.path.join(os.path.dirname(__file__),os.path.pardir))
    if os.path.exists(os.path.join(ROOT_DIR,'umit')):
         sys.path.insert(0, ROOT_DIR)
         execfile(os.path.join(ROOT_DIR, 'deps', 'umit-common', 'utils', 'importer.py'))
         sys.path.insert(0, os.path.join(ROOT_DIR, 'deps'))
         sys.path.insert(0, os.path.join(ROOT_DIR, 'deps', 'icm-common'))
         sys.path.insert(0, os.path.join(ROOT_DIR, 'deps', 'umit-common'))
         sys.path.insert(0, os.path.join(ROOT_DIR, 'deps', 'higwidgets'))
    else:
         raise Exception("Can't find root dir.")
else:
    import pygtk
    pygtk.require('2.0')
    execfile(os.path.join('icmagent','deps', 'umit-common', 'utils', 'importer.py'))
    sys.path.insert(0, os.path.join('icmagent','deps'))
    sys.path.insert(0, os.path.join('icmagent','deps', 'icm-common'))
    sys.path.insert(0, os.path.join('icmagent','deps', 'umit-common'))
    sys.path.insert(0, os.path.join('icmagent','deps', 'higwidgets'))

# check if there's GTK environment
useGTK = True
if useGTK:
    if 'twisted.internet.reactor' in sys.modules:
        del sys.modules['twisted.internet.reactor']
    from twisted.internet import gtk2reactor # for gtk-2.0
    gtk2reactor.install()

from umit.icm.agent.Application import theApp
from umit.icm.agent.I18N import _
from umit.icm.agent.Version import VERSION
##############################################
# Exception Hook for Bug Report
##############################################
class UmitExceptionHook(object):
    def __call__(self, etype, emsg, etb):

        import warnings
        warnings.filterwarnings("error", module = "gtk")
        try:
            import gtk
        except Warning, e:
            print e.message
            sys.exit(-1)
        warnings.resetwarnings()

        from umit.icm.agent.gui.BugReport import CrashReport
        from higwidgets.higdialogs import HIGAlertDialog

        if etype == ImportError:
            d = HIGAlertDialog(type=gtk.MESSAGE_ERROR,
                message_format=_("Import error"),
                secondary_text=_("\nA required module was not "
                    "found.\n\nError:") + " %s" % emsg)
            d.run()
            d.destroy()
            return

        # Getting dependencies versions
        import higwidgets
        import umit.icm.agent.core
        import umit.icm.agent.gui

        gtk_version = "%s.%s.%s" % gtk.gtk_version
        pygtk_version = "%s.%s.%s" % gtk.ver
        higwidgets_version = getattr(higwidgets, "__version__", "< 0.9.5")
        python_version = sys.version
        try:
            osuname = " ".join(os.uname())
        except AttributeError:
            # os.uname is not available under Windows, and other unlikely
            # systems
            try:
                osuname = " ".join(platform.win32_ver())
            except AttributeError:
                osuname = "UNKNOWN"

        umit_version = VERSION
        #umitCore_version = getattr(umitCore, "__version__", "< 0.0.1")
        #umitGUI_version = getattr(umitGUI, "__version__", "< 0.0.1")

        versions = _("""
Versions:
---
GTK: %s
PyGTK: %s
HIGWidgets: %s
Python: %s
Operating System: %s
Umit:%s 
---""") % (gtk_version,
           pygtk_version,
           higwidgets_version,
           python_version,
           osuname,
           umit_version)
        print "-------------------------------------------------------------"
        crash_text = cgitb.text((etype, emsg, etb))
        crash_text_dialog = "\n%s\n%s\n" % (versions, crash_text)
        crash_text = "{{{\n%s\n%s\n}}}" % (versions, crash_text)

        #Dialog info
        extrainfo_dialog = "%-17s %s\n%-17s %s\n%-17s %s\n%-17s %s\n" % (
            "sys.platform", sys.platform, "os.name", os.name,
            "Gtk version", '.'.join(map(str, gtk.gtk_version)),
            "Umit version", VERSION)
        crashmsg_dialog = "Crash Report\n%s\n%s\nDescription\n%s\n%s" % (
                '=' * 10, extrainfo_dialog, '-' * 20, crash_text_dialog)
        
        #if not gs.crash_report:
        #    return 

        extrainfo = (
                "%-17s %s\n[[BR]]%-17s %s\n[[BR]]%-17s %s\n"
                "[[BR]]%-17s %s[[BR]]\n" % (
                    "sys.platform", sys.platform, "os.name", os.name,
                    "Gtk version", '.'.join(map(str, gtk.gtk_version)),
                    "Umit version", VERSION))
        crashmsg = (
                "Crash Report\n[[BR]]%s[[BR]]\n[[BR]]%s\n"
                "Description\n%s\n%s" % (
                    '=' * 10, extrainfo, '-' * 20, crash_text))

        # If umit started running then gtk.main was invoked. Let's end this
        # main loop now so when the Crash Report is closed, umit is also
        # closed.
        if gtk.main_level():
            gtk.main_quit()
            # We registered App().safe_shutdown for the SIGTERM signal,
            # now we can retrieve it and find out the umit's main window if
            # it got created.
            safeshutdown_meth = signal.getsignal(signal.SIGTERM)
            mainwindow = getattr(
                    safeshutdown_meth.im_self, 'main_window', None)
            # Disable controls.
            if mainwindow is not None:
                mainwindow.disable_window()

        try:
            cwin = CrashReport("OpenMonitor Desktop Agent Crash - '%s'" % emsg,
                    crashmsg, description_dialog=crashmsg_dialog)
            cwin.show_all()
            cwin.connect('destroy', gtk.main_quit)
            from umit.icm.agent.Application import main_is_frozen
            if main_is_frozen():
                gtk.gdk.threads_enter()
            gtk.main()
            if main_is_frozen():
                gtk.gdk.threads_leave()
        except:
            import traceback
            traceback.print_exc()
            tempfd, tempname = tempfile.mkstemp()
            os.write(tempfd, crashmsg_dialog)
            d = HIGAlertDialog(type=gtk.MESSAGE_ERROR,
                    message_format=_("Bug not reported"),
                    secondary_text=_("A critical error occourried during "
                        "Open Monitor execution, \nand it was not properly reported "
                        "to our bug tracker. The crash description was saved "
                        "to: %s, so you can still report it on our bug "
                        "tracker.") % tempname)
            os.close(tempfd)
            d.run()
            d.destroy()

sys.excepthook = UmitExceptionHook()

def main(args):
    if useGTK:
        theApp.use_gui = True
    else:
        theApp.use_gui = False
    try:  
        theApp.start()
    except Exception as e:
        from umit.icm.agent.Errors import ErrorHandler
        ErrorHandler.handle_error(e)


if __name__ == "__main__":
    main(sys.argv)
