// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maidsafe/dht/kademlia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace dht {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Endpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Endpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapContacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapContacts_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_2fdht_2fkademlia_2eproto() {
  protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe/dht/kademlia.proto");
  GOOGLE_CHECK(file != NULL);
  Endpoint_descriptor_ = file->message_type(0);
  static const int Endpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, port_),
  };
  Endpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Endpoint_descriptor_,
      Endpoint::default_instance_,
      Endpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Endpoint));
  Contact_descriptor_ = file->message_type(1);
  static const int Contact_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, local_ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, rendezvous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, tcp443_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, tcp80_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, prefer_local_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, public_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, other_info_),
  };
  Contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contact_descriptor_,
      Contact::default_instance_,
      Contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contact));
  BootstrapContacts_descriptor_ = file->message_type(2);
  static const int BootstrapContacts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapContacts, contact_),
  };
  BootstrapContacts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootstrapContacts_descriptor_,
      BootstrapContacts::default_instance_,
      BootstrapContacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapContacts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapContacts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootstrapContacts));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_2fdht_2fkademlia_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Endpoint_descriptor_, &Endpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contact_descriptor_, &Contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootstrapContacts_descriptor_, &BootstrapContacts::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_2fdht_2fkademlia_2eproto() {
  delete Endpoint::default_instance_;
  delete Endpoint_reflection_;
  delete Contact::default_instance_;
  delete Contact_reflection_;
  delete BootstrapContacts::default_instance_;
  delete BootstrapContacts_reflection_;
}

void protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033maidsafe/dht/kademlia.proto\022\025maidsafe."
    "dht.protobuf\"$\n\010Endpoint\022\n\n\002ip\030\001 \002(\014\022\014\n\004"
    "port\030\002 \002(\005\"\235\002\n\007Contact\0221\n\010endpoint\030\001 \001(\013"
    "2\037.maidsafe.dht.protobuf.Endpoint\022\021\n\tloc"
    "al_ips\030\002 \003(\014\022\022\n\nlocal_port\030\003 \001(\005\0223\n\nrend"
    "ezvous\030\004 \001(\0132\037.maidsafe.dht.protobuf.End"
    "point\022\016\n\006tcp443\030\005 \001(\010\022\r\n\005tcp80\030\006 \001(\010\022\024\n\014"
    "prefer_local\030\007 \001(\010\022\017\n\007node_id\030\010 \002(\014\022\025\n\rp"
    "ublic_key_id\030\t \001(\014\022\022\n\npublic_key\030\n \001(\014\022\022"
    "\n\nother_info\030\013 \001(\014\"D\n\021BootstrapContacts\022"
    "/\n\007contact\030\001 \003(\0132\036.maidsafe.dht.protobuf"
    ".Contact", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe/dht/kademlia.proto", &protobuf_RegisterTypes);
  Endpoint::default_instance_ = new Endpoint();
  Contact::default_instance_ = new Contact();
  BootstrapContacts::default_instance_ = new BootstrapContacts();
  Endpoint::default_instance_->InitAsDefaultInstance();
  Contact::default_instance_->InitAsDefaultInstance();
  BootstrapContacts::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fdht_2fkademlia_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fdht_2fkademlia_2eproto {
  StaticDescriptorInitializer_maidsafe_2fdht_2fkademlia_2eproto() {
    protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fdht_2fkademlia_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Endpoint::kIpFieldNumber;
const int Endpoint::kPortFieldNumber;
#endif  // !_MSC_VER

Endpoint::Endpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Endpoint::InitAsDefaultInstance() {
}

Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Endpoint::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Endpoint::~Endpoint() {
  SharedDtor();
}

void Endpoint::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Endpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Endpoint_descriptor_;
}

const Endpoint& Endpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();  return *default_instance_;
}

Endpoint* Endpoint::default_instance_ = NULL;

Endpoint* Endpoint::New() const {
  return new Endpoint;
}

void Endpoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Endpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Endpoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Endpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Endpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Endpoint_descriptor_;
  metadata.reflection = Endpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Contact::kEndpointFieldNumber;
const int Contact::kLocalIpsFieldNumber;
const int Contact::kLocalPortFieldNumber;
const int Contact::kRendezvousFieldNumber;
const int Contact::kTcp443FieldNumber;
const int Contact::kTcp80FieldNumber;
const int Contact::kPreferLocalFieldNumber;
const int Contact::kNodeIdFieldNumber;
const int Contact::kPublicKeyIdFieldNumber;
const int Contact::kPublicKeyFieldNumber;
const int Contact::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

Contact::Contact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Contact::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::maidsafe::dht::protobuf::Endpoint*>(&::maidsafe::dht::protobuf::Endpoint::default_instance());
  rendezvous_ = const_cast< ::maidsafe::dht::protobuf::Endpoint*>(&::maidsafe::dht::protobuf::Endpoint::default_instance());
}

Contact::Contact(const Contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Contact::SharedCtor() {
  _cached_size_ = 0;
  endpoint_ = NULL;
  local_port_ = 0;
  rendezvous_ = NULL;
  tcp443_ = false;
  tcp80_ = false;
  prefer_local_ = false;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contact::~Contact() {
  SharedDtor();
}

void Contact::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (public_key_id_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_id_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (other_info_ != &::google::protobuf::internal::kEmptyString) {
    delete other_info_;
  }
  if (this != default_instance_) {
    delete endpoint_;
    delete rendezvous_;
  }
}

void Contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contact_descriptor_;
}

const Contact& Contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();  return *default_instance_;
}

Contact* Contact::default_instance_ = NULL;

Contact* Contact::New() const {
  return new Contact;
}

void Contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::maidsafe::dht::protobuf::Endpoint::Clear();
    }
    local_port_ = 0;
    if (has_rendezvous()) {
      if (rendezvous_ != NULL) rendezvous_->::maidsafe::dht::protobuf::Endpoint::Clear();
    }
    tcp443_ = false;
    tcp80_ = false;
    prefer_local_ = false;
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_public_key_id()) {
      if (public_key_id_ != &::google::protobuf::internal::kEmptyString) {
        public_key_id_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    if (has_other_info()) {
      if (other_info_ != &::google::protobuf::internal::kEmptyString) {
        other_info_->clear();
      }
    }
  }
  local_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maidsafe.dht.protobuf.Endpoint endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_ips;
        break;
      }
      
      // repeated bytes local_ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_local_ips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_ips;
        if (input->ExpectTag(24)) goto parse_local_port;
        break;
      }
      
      // optional int32 local_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
          set_has_local_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rendezvous;
        break;
      }
      
      // optional .maidsafe.dht.protobuf.Endpoint rendezvous = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rendezvous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rendezvous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tcp443;
        break;
      }
      
      // optional bool tcp443 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp443:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp443_)));
          set_has_tcp443();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tcp80;
        break;
      }
      
      // optional bool tcp80 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp80:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp80_)));
          set_has_tcp80();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prefer_local;
        break;
      }
      
      // optional bool prefer_local = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefer_local:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_local_)));
          set_has_prefer_local();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_node_id;
        break;
      }
      
      // required bytes node_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_public_key_id;
        break;
      }
      
      // optional bytes public_key_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_other_info;
        break;
      }
      
      // optional bytes other_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maidsafe.dht.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoint(), output);
  }
  
  // repeated bytes local_ips = 2;
  for (int i = 0; i < this->local_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->local_ips(i), output);
  }
  
  // optional int32 local_port = 3;
  if (has_local_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->local_port(), output);
  }
  
  // optional .maidsafe.dht.protobuf.Endpoint rendezvous = 4;
  if (has_rendezvous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rendezvous(), output);
  }
  
  // optional bool tcp443 = 5;
  if (has_tcp443()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tcp443(), output);
  }
  
  // optional bool tcp80 = 6;
  if (has_tcp80()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tcp80(), output);
  }
  
  // optional bool prefer_local = 7;
  if (has_prefer_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->prefer_local(), output);
  }
  
  // required bytes node_id = 8;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->node_id(), output);
  }
  
  // optional bytes public_key_id = 9;
  if (has_public_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->public_key_id(), output);
  }
  
  // optional bytes public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->public_key(), output);
  }
  
  // optional bytes other_info = 11;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->other_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maidsafe.dht.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpoint(), target);
  }
  
  // repeated bytes local_ips = 2;
  for (int i = 0; i < this->local_ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->local_ips(i), target);
  }
  
  // optional int32 local_port = 3;
  if (has_local_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->local_port(), target);
  }
  
  // optional .maidsafe.dht.protobuf.Endpoint rendezvous = 4;
  if (has_rendezvous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rendezvous(), target);
  }
  
  // optional bool tcp443 = 5;
  if (has_tcp443()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tcp443(), target);
  }
  
  // optional bool tcp80 = 6;
  if (has_tcp80()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tcp80(), target);
  }
  
  // optional bool prefer_local = 7;
  if (has_prefer_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->prefer_local(), target);
  }
  
  // required bytes node_id = 8;
  if (has_node_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->node_id(), target);
  }
  
  // optional bytes public_key_id = 9;
  if (has_public_key_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->public_key_id(), target);
  }
  
  // optional bytes public_key = 10;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->public_key(), target);
  }
  
  // optional bytes other_info = 11;
  if (has_other_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->other_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Contact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maidsafe.dht.protobuf.Endpoint endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }
    
    // optional int32 local_port = 3;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_port());
    }
    
    // optional .maidsafe.dht.protobuf.Endpoint rendezvous = 4;
    if (has_rendezvous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rendezvous());
    }
    
    // optional bool tcp443 = 5;
    if (has_tcp443()) {
      total_size += 1 + 1;
    }
    
    // optional bool tcp80 = 6;
    if (has_tcp80()) {
      total_size += 1 + 1;
    }
    
    // optional bool prefer_local = 7;
    if (has_prefer_local()) {
      total_size += 1 + 1;
    }
    
    // required bytes node_id = 8;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes public_key_id = 9;
    if (has_public_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key_id());
    }
    
    // optional bytes public_key = 10;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }
    
    // optional bytes other_info = 11;
    if (has_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->other_info());
    }
    
  }
  // repeated bytes local_ips = 2;
  total_size += 1 * this->local_ips_size();
  for (int i = 0; i < this->local_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->local_ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_ips_.MergeFrom(from.local_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpoint()) {
      mutable_endpoint()->::maidsafe::dht::protobuf::Endpoint::MergeFrom(from.endpoint());
    }
    if (from.has_local_port()) {
      set_local_port(from.local_port());
    }
    if (from.has_rendezvous()) {
      mutable_rendezvous()->::maidsafe::dht::protobuf::Endpoint::MergeFrom(from.rendezvous());
    }
    if (from.has_tcp443()) {
      set_tcp443(from.tcp443());
    }
    if (from.has_tcp80()) {
      set_tcp80(from.tcp80());
    }
    if (from.has_prefer_local()) {
      set_prefer_local(from.prefer_local());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_public_key_id()) {
      set_public_key_id(from.public_key_id());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_other_info()) {
      set_other_info(from.other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  
  if (has_endpoint()) {
    if (!this->endpoint().IsInitialized()) return false;
  }
  if (has_rendezvous()) {
    if (!this->rendezvous().IsInitialized()) return false;
  }
  return true;
}

void Contact::Swap(Contact* other) {
  if (other != this) {
    std::swap(endpoint_, other->endpoint_);
    local_ips_.Swap(&other->local_ips_);
    std::swap(local_port_, other->local_port_);
    std::swap(rendezvous_, other->rendezvous_);
    std::swap(tcp443_, other->tcp443_);
    std::swap(tcp80_, other->tcp80_);
    std::swap(prefer_local_, other->prefer_local_);
    std::swap(node_id_, other->node_id_);
    std::swap(public_key_id_, other->public_key_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(other_info_, other->other_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contact_descriptor_;
  metadata.reflection = Contact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BootstrapContacts::kContactFieldNumber;
#endif  // !_MSC_VER

BootstrapContacts::BootstrapContacts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BootstrapContacts::InitAsDefaultInstance() {
}

BootstrapContacts::BootstrapContacts(const BootstrapContacts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BootstrapContacts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootstrapContacts::~BootstrapContacts() {
  SharedDtor();
}

void BootstrapContacts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BootstrapContacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrapContacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapContacts_descriptor_;
}

const BootstrapContacts& BootstrapContacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();  return *default_instance_;
}

BootstrapContacts* BootstrapContacts::default_instance_ = NULL;

BootstrapContacts* BootstrapContacts::New() const {
  return new BootstrapContacts;
}

void BootstrapContacts::Clear() {
  contact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootstrapContacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .maidsafe.dht.protobuf.Contact contact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contact;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BootstrapContacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .maidsafe.dht.protobuf.Contact contact = 1;
  for (int i = 0; i < this->contact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contact(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BootstrapContacts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .maidsafe.dht.protobuf.Contact contact = 1;
  for (int i = 0; i < this->contact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contact(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BootstrapContacts::ByteSize() const {
  int total_size = 0;
  
  // repeated .maidsafe.dht.protobuf.Contact contact = 1;
  total_size += 1 * this->contact_size();
  for (int i = 0; i < this->contact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrapContacts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootstrapContacts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootstrapContacts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootstrapContacts::MergeFrom(const BootstrapContacts& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_.MergeFrom(from.contact_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootstrapContacts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapContacts::CopyFrom(const BootstrapContacts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapContacts::IsInitialized() const {
  
  for (int i = 0; i < contact_size(); i++) {
    if (!this->contact(i).IsInitialized()) return false;
  }
  return true;
}

void BootstrapContacts::Swap(BootstrapContacts* other) {
  if (other != this) {
    contact_.Swap(&other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BootstrapContacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootstrapContacts_descriptor_;
  metadata.reflection = BootstrapContacts_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace dht
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
