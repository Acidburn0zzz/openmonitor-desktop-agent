// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/dht/kademlia.proto

#ifndef PROTOBUF_maidsafe_2fdht_2fkademlia_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fdht_2fkademlia_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace dht {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
void protobuf_AssignDesc_maidsafe_2fdht_2fkademlia_2eproto();
void protobuf_ShutdownFile_maidsafe_2fdht_2fkademlia_2eproto();

class Endpoint;
class Contact;
class BootstrapContacts;

// ===================================================================

class Endpoint : public ::google::protobuf::Message {
 public:
  Endpoint();
  virtual ~Endpoint();
  
  Endpoint(const Endpoint& from);
  
  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Endpoint& default_instance();
  
  void Swap(Endpoint* other);
  
  // implements Message ----------------------------------------------
  
  Endpoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.dht.protobuf.Endpoint)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2fdht_2fkademlia_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fdht_2fkademlia_2eproto();
  
  void InitAsDefaultInstance();
  static Endpoint* default_instance_;
};
// -------------------------------------------------------------------

class Contact : public ::google::protobuf::Message {
 public:
  Contact();
  virtual ~Contact();
  
  Contact(const Contact& from);
  
  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();
  
  void Swap(Contact* other);
  
  // implements Message ----------------------------------------------
  
  Contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .maidsafe.dht.protobuf.Endpoint endpoint = 1;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  inline const ::maidsafe::dht::protobuf::Endpoint& endpoint() const;
  inline ::maidsafe::dht::protobuf::Endpoint* mutable_endpoint();
  inline ::maidsafe::dht::protobuf::Endpoint* release_endpoint();
  
  // repeated bytes local_ips = 2;
  inline int local_ips_size() const;
  inline void clear_local_ips();
  static const int kLocalIpsFieldNumber = 2;
  inline const ::std::string& local_ips(int index) const;
  inline ::std::string* mutable_local_ips(int index);
  inline void set_local_ips(int index, const ::std::string& value);
  inline void set_local_ips(int index, const char* value);
  inline void set_local_ips(int index, const void* value, size_t size);
  inline ::std::string* add_local_ips();
  inline void add_local_ips(const ::std::string& value);
  inline void add_local_ips(const char* value);
  inline void add_local_ips(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& local_ips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_local_ips();
  
  // optional int32 local_port = 3;
  inline bool has_local_port() const;
  inline void clear_local_port();
  static const int kLocalPortFieldNumber = 3;
  inline ::google::protobuf::int32 local_port() const;
  inline void set_local_port(::google::protobuf::int32 value);
  
  // optional .maidsafe.dht.protobuf.Endpoint rendezvous = 4;
  inline bool has_rendezvous() const;
  inline void clear_rendezvous();
  static const int kRendezvousFieldNumber = 4;
  inline const ::maidsafe::dht::protobuf::Endpoint& rendezvous() const;
  inline ::maidsafe::dht::protobuf::Endpoint* mutable_rendezvous();
  inline ::maidsafe::dht::protobuf::Endpoint* release_rendezvous();
  
  // optional bool tcp443 = 5;
  inline bool has_tcp443() const;
  inline void clear_tcp443();
  static const int kTcp443FieldNumber = 5;
  inline bool tcp443() const;
  inline void set_tcp443(bool value);
  
  // optional bool tcp80 = 6;
  inline bool has_tcp80() const;
  inline void clear_tcp80();
  static const int kTcp80FieldNumber = 6;
  inline bool tcp80() const;
  inline void set_tcp80(bool value);
  
  // optional bool prefer_local = 7;
  inline bool has_prefer_local() const;
  inline void clear_prefer_local();
  static const int kPreferLocalFieldNumber = 7;
  inline bool prefer_local() const;
  inline void set_prefer_local(bool value);
  
  // required bytes node_id = 8;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 8;
  inline const ::std::string& node_id() const;
  inline void set_node_id(const ::std::string& value);
  inline void set_node_id(const char* value);
  inline void set_node_id(const void* value, size_t size);
  inline ::std::string* mutable_node_id();
  inline ::std::string* release_node_id();
  
  // optional bytes public_key_id = 9;
  inline bool has_public_key_id() const;
  inline void clear_public_key_id();
  static const int kPublicKeyIdFieldNumber = 9;
  inline const ::std::string& public_key_id() const;
  inline void set_public_key_id(const ::std::string& value);
  inline void set_public_key_id(const char* value);
  inline void set_public_key_id(const void* value, size_t size);
  inline ::std::string* mutable_public_key_id();
  inline ::std::string* release_public_key_id();
  
  // optional bytes public_key = 10;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 10;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const void* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  
  // optional bytes other_info = 11;
  inline bool has_other_info() const;
  inline void clear_other_info();
  static const int kOtherInfoFieldNumber = 11;
  inline const ::std::string& other_info() const;
  inline void set_other_info(const ::std::string& value);
  inline void set_other_info(const char* value);
  inline void set_other_info(const void* value, size_t size);
  inline ::std::string* mutable_other_info();
  inline ::std::string* release_other_info();
  
  // @@protoc_insertion_point(class_scope:maidsafe.dht.protobuf.Contact)
 private:
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_local_port();
  inline void clear_has_local_port();
  inline void set_has_rendezvous();
  inline void clear_has_rendezvous();
  inline void set_has_tcp443();
  inline void clear_has_tcp443();
  inline void set_has_tcp80();
  inline void clear_has_tcp80();
  inline void set_has_prefer_local();
  inline void clear_has_prefer_local();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_public_key_id();
  inline void clear_has_public_key_id();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_other_info();
  inline void clear_has_other_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::dht::protobuf::Endpoint* endpoint_;
  ::google::protobuf::RepeatedPtrField< ::std::string> local_ips_;
  ::maidsafe::dht::protobuf::Endpoint* rendezvous_;
  ::google::protobuf::int32 local_port_;
  bool tcp443_;
  bool tcp80_;
  bool prefer_local_;
  ::std::string* node_id_;
  ::std::string* public_key_id_;
  ::std::string* public_key_;
  ::std::string* other_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2fdht_2fkademlia_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fdht_2fkademlia_2eproto();
  
  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// -------------------------------------------------------------------

class BootstrapContacts : public ::google::protobuf::Message {
 public:
  BootstrapContacts();
  virtual ~BootstrapContacts();
  
  BootstrapContacts(const BootstrapContacts& from);
  
  inline BootstrapContacts& operator=(const BootstrapContacts& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapContacts& default_instance();
  
  void Swap(BootstrapContacts* other);
  
  // implements Message ----------------------------------------------
  
  BootstrapContacts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BootstrapContacts& from);
  void MergeFrom(const BootstrapContacts& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .maidsafe.dht.protobuf.Contact contact = 1;
  inline int contact_size() const;
  inline void clear_contact();
  static const int kContactFieldNumber = 1;
  inline const ::maidsafe::dht::protobuf::Contact& contact(int index) const;
  inline ::maidsafe::dht::protobuf::Contact* mutable_contact(int index);
  inline ::maidsafe::dht::protobuf::Contact* add_contact();
  inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::dht::protobuf::Contact >&
      contact() const;
  inline ::google::protobuf::RepeatedPtrField< ::maidsafe::dht::protobuf::Contact >*
      mutable_contact();
  
  // @@protoc_insertion_point(class_scope:maidsafe.dht.protobuf.BootstrapContacts)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::maidsafe::dht::protobuf::Contact > contact_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2fdht_2fkademlia_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fdht_2fkademlia_2eproto();
  
  void InitAsDefaultInstance();
  static BootstrapContacts* default_instance_;
};
// ===================================================================


// ===================================================================

// Endpoint

// required bytes ip = 1;
inline bool Endpoint::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Endpoint::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Endpoint::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Endpoint::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Endpoint::ip() const {
  return *ip_;
}
inline void Endpoint::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Endpoint::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Endpoint::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Endpoint::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Endpoint::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 2;
inline bool Endpoint::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Endpoint::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Endpoint::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Endpoint::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Endpoint::port() const {
  return port_;
}
inline void Endpoint::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Contact

// optional .maidsafe.dht.protobuf.Endpoint endpoint = 1;
inline bool Contact::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->::maidsafe::dht::protobuf::Endpoint::Clear();
  clear_has_endpoint();
}
inline const ::maidsafe::dht::protobuf::Endpoint& Contact::endpoint() const {
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::maidsafe::dht::protobuf::Endpoint* Contact::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) endpoint_ = new ::maidsafe::dht::protobuf::Endpoint;
  return endpoint_;
}
inline ::maidsafe::dht::protobuf::Endpoint* Contact::release_endpoint() {
  clear_has_endpoint();
  ::maidsafe::dht::protobuf::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}

// repeated bytes local_ips = 2;
inline int Contact::local_ips_size() const {
  return local_ips_.size();
}
inline void Contact::clear_local_ips() {
  local_ips_.Clear();
}
inline const ::std::string& Contact::local_ips(int index) const {
  return local_ips_.Get(index);
}
inline ::std::string* Contact::mutable_local_ips(int index) {
  return local_ips_.Mutable(index);
}
inline void Contact::set_local_ips(int index, const ::std::string& value) {
  local_ips_.Mutable(index)->assign(value);
}
inline void Contact::set_local_ips(int index, const char* value) {
  local_ips_.Mutable(index)->assign(value);
}
inline void Contact::set_local_ips(int index, const void* value, size_t size) {
  local_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::add_local_ips() {
  return local_ips_.Add();
}
inline void Contact::add_local_ips(const ::std::string& value) {
  local_ips_.Add()->assign(value);
}
inline void Contact::add_local_ips(const char* value) {
  local_ips_.Add()->assign(value);
}
inline void Contact::add_local_ips(const void* value, size_t size) {
  local_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Contact::local_ips() const {
  return local_ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Contact::mutable_local_ips() {
  return &local_ips_;
}

// optional int32 local_port = 3;
inline bool Contact::has_local_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contact::set_has_local_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contact::clear_has_local_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contact::clear_local_port() {
  local_port_ = 0;
  clear_has_local_port();
}
inline ::google::protobuf::int32 Contact::local_port() const {
  return local_port_;
}
inline void Contact::set_local_port(::google::protobuf::int32 value) {
  set_has_local_port();
  local_port_ = value;
}

// optional .maidsafe.dht.protobuf.Endpoint rendezvous = 4;
inline bool Contact::has_rendezvous() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact::set_has_rendezvous() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact::clear_has_rendezvous() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contact::clear_rendezvous() {
  if (rendezvous_ != NULL) rendezvous_->::maidsafe::dht::protobuf::Endpoint::Clear();
  clear_has_rendezvous();
}
inline const ::maidsafe::dht::protobuf::Endpoint& Contact::rendezvous() const {
  return rendezvous_ != NULL ? *rendezvous_ : *default_instance_->rendezvous_;
}
inline ::maidsafe::dht::protobuf::Endpoint* Contact::mutable_rendezvous() {
  set_has_rendezvous();
  if (rendezvous_ == NULL) rendezvous_ = new ::maidsafe::dht::protobuf::Endpoint;
  return rendezvous_;
}
inline ::maidsafe::dht::protobuf::Endpoint* Contact::release_rendezvous() {
  clear_has_rendezvous();
  ::maidsafe::dht::protobuf::Endpoint* temp = rendezvous_;
  rendezvous_ = NULL;
  return temp;
}

// optional bool tcp443 = 5;
inline bool Contact::has_tcp443() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Contact::set_has_tcp443() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Contact::clear_has_tcp443() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Contact::clear_tcp443() {
  tcp443_ = false;
  clear_has_tcp443();
}
inline bool Contact::tcp443() const {
  return tcp443_;
}
inline void Contact::set_tcp443(bool value) {
  set_has_tcp443();
  tcp443_ = value;
}

// optional bool tcp80 = 6;
inline bool Contact::has_tcp80() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Contact::set_has_tcp80() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Contact::clear_has_tcp80() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Contact::clear_tcp80() {
  tcp80_ = false;
  clear_has_tcp80();
}
inline bool Contact::tcp80() const {
  return tcp80_;
}
inline void Contact::set_tcp80(bool value) {
  set_has_tcp80();
  tcp80_ = value;
}

// optional bool prefer_local = 7;
inline bool Contact::has_prefer_local() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Contact::set_has_prefer_local() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Contact::clear_has_prefer_local() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Contact::clear_prefer_local() {
  prefer_local_ = false;
  clear_has_prefer_local();
}
inline bool Contact::prefer_local() const {
  return prefer_local_;
}
inline void Contact::set_prefer_local(bool value) {
  set_has_prefer_local();
  prefer_local_ = value;
}

// required bytes node_id = 8;
inline bool Contact::has_node_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Contact::set_has_node_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Contact::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Contact::clear_node_id() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    node_id_->clear();
  }
  clear_has_node_id();
}
inline const ::std::string& Contact::node_id() const {
  return *node_id_;
}
inline void Contact::set_node_id(const ::std::string& value) {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::kEmptyString) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void Contact::set_node_id(const char* value) {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::kEmptyString) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(value);
}
inline void Contact::set_node_id(const void* value, size_t size) {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::kEmptyString) {
    node_id_ = new ::std::string;
  }
  node_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_node_id() {
  set_has_node_id();
  if (node_id_ == &::google::protobuf::internal::kEmptyString) {
    node_id_ = new ::std::string;
  }
  return node_id_;
}
inline ::std::string* Contact::release_node_id() {
  clear_has_node_id();
  if (node_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_id_;
    node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes public_key_id = 9;
inline bool Contact::has_public_key_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Contact::set_has_public_key_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Contact::clear_has_public_key_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Contact::clear_public_key_id() {
  if (public_key_id_ != &::google::protobuf::internal::kEmptyString) {
    public_key_id_->clear();
  }
  clear_has_public_key_id();
}
inline const ::std::string& Contact::public_key_id() const {
  return *public_key_id_;
}
inline void Contact::set_public_key_id(const ::std::string& value) {
  set_has_public_key_id();
  if (public_key_id_ == &::google::protobuf::internal::kEmptyString) {
    public_key_id_ = new ::std::string;
  }
  public_key_id_->assign(value);
}
inline void Contact::set_public_key_id(const char* value) {
  set_has_public_key_id();
  if (public_key_id_ == &::google::protobuf::internal::kEmptyString) {
    public_key_id_ = new ::std::string;
  }
  public_key_id_->assign(value);
}
inline void Contact::set_public_key_id(const void* value, size_t size) {
  set_has_public_key_id();
  if (public_key_id_ == &::google::protobuf::internal::kEmptyString) {
    public_key_id_ = new ::std::string;
  }
  public_key_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_public_key_id() {
  set_has_public_key_id();
  if (public_key_id_ == &::google::protobuf::internal::kEmptyString) {
    public_key_id_ = new ::std::string;
  }
  return public_key_id_;
}
inline ::std::string* Contact::release_public_key_id() {
  clear_has_public_key_id();
  if (public_key_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_id_;
    public_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes public_key = 10;
inline bool Contact::has_public_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Contact::set_has_public_key() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Contact::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Contact::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& Contact::public_key() const {
  return *public_key_;
}
inline void Contact::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void Contact::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void Contact::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* Contact::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes other_info = 11;
inline bool Contact::has_other_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Contact::set_has_other_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Contact::clear_has_other_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Contact::clear_other_info() {
  if (other_info_ != &::google::protobuf::internal::kEmptyString) {
    other_info_->clear();
  }
  clear_has_other_info();
}
inline const ::std::string& Contact::other_info() const {
  return *other_info_;
}
inline void Contact::set_other_info(const ::std::string& value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
}
inline void Contact::set_other_info(const char* value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
}
inline void Contact::set_other_info(const void* value, size_t size) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_other_info() {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  return other_info_;
}
inline ::std::string* Contact::release_other_info() {
  clear_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = other_info_;
    other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BootstrapContacts

// repeated .maidsafe.dht.protobuf.Contact contact = 1;
inline int BootstrapContacts::contact_size() const {
  return contact_.size();
}
inline void BootstrapContacts::clear_contact() {
  contact_.Clear();
}
inline const ::maidsafe::dht::protobuf::Contact& BootstrapContacts::contact(int index) const {
  return contact_.Get(index);
}
inline ::maidsafe::dht::protobuf::Contact* BootstrapContacts::mutable_contact(int index) {
  return contact_.Mutable(index);
}
inline ::maidsafe::dht::protobuf::Contact* BootstrapContacts::add_contact() {
  return contact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::maidsafe::dht::protobuf::Contact >&
BootstrapContacts::contact() const {
  return contact_;
}
inline ::google::protobuf::RepeatedPtrField< ::maidsafe::dht::protobuf::Contact >*
BootstrapContacts::mutable_contact() {
  return &contact_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace dht
}  // namespace maidsafe

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maidsafe_2fdht_2fkademlia_2eproto__INCLUDED
