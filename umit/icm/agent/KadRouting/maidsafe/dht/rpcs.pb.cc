// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace dht {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* SignedValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindValueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindValueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindValueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindValueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindNodesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindNodesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindNodesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindNodesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRefreshRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRefreshRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRefreshResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRefreshResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRefreshRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRefreshRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRefreshResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRefreshResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownlistNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownlistNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_2fdht_2frpcs_2eproto() {
  protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe/dht/rpcs.proto");
  GOOGLE_CHECK(file != NULL);
  SignedValue_descriptor_ = file->message_type(0);
  static const int SignedValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, signature_),
  };
  SignedValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedValue_descriptor_,
      SignedValue::default_instance_,
      SignedValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedValue));
  PingRequest_descriptor_ = file->message_type(1);
  static const int PingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, ping_),
  };
  PingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingRequest));
  PingResponse_descriptor_ = file->message_type(2);
  static const int PingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, echo_),
  };
  PingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingResponse_descriptor_,
      PingResponse::default_instance_,
      PingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingResponse));
  FindValueRequest_descriptor_ = file->message_type(3);
  static const int FindValueRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueRequest, num_nodes_requested_),
  };
  FindValueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindValueRequest_descriptor_,
      FindValueRequest::default_instance_,
      FindValueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindValueRequest));
  FindValueResponse_descriptor_ = file->message_type(4);
  static const int FindValueResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueResponse, closest_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueResponse, signed_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueResponse, cached_copy_holder_),
  };
  FindValueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindValueResponse_descriptor_,
      FindValueResponse::default_instance_,
      FindValueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindValueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindValueResponse));
  FindNodesRequest_descriptor_ = file->message_type(5);
  static const int FindNodesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesRequest, num_nodes_requested_),
  };
  FindNodesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindNodesRequest_descriptor_,
      FindNodesRequest::default_instance_,
      FindNodesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindNodesRequest));
  FindNodesResponse_descriptor_ = file->message_type(6);
  static const int FindNodesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesResponse, closest_nodes_),
  };
  FindNodesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindNodesResponse_descriptor_,
      FindNodesResponse::default_instance_,
      FindNodesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindNodesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindNodesResponse));
  StoreRequest_descriptor_ = file->message_type(7);
  static const int StoreRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, signed_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, ttl_),
  };
  StoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRequest_descriptor_,
      StoreRequest::default_instance_,
      StoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRequest));
  StoreResponse_descriptor_ = file->message_type(8);
  static const int StoreResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, result_),
  };
  StoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreResponse_descriptor_,
      StoreResponse::default_instance_,
      StoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreResponse));
  StoreRefreshRequest_descriptor_ = file->message_type(9);
  static const int StoreRefreshRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshRequest, serialised_store_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshRequest, serialised_store_request_signature_),
  };
  StoreRefreshRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRefreshRequest_descriptor_,
      StoreRefreshRequest::default_instance_,
      StoreRefreshRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRefreshRequest));
  StoreRefreshResponse_descriptor_ = file->message_type(10);
  static const int StoreRefreshResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshResponse, result_),
  };
  StoreRefreshResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRefreshResponse_descriptor_,
      StoreRefreshResponse::default_instance_,
      StoreRefreshResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRefreshResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRefreshResponse));
  DeleteRequest_descriptor_ = file->message_type(11);
  static const int DeleteRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, signed_value_),
  };
  DeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::default_instance_,
      DeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRequest));
  DeleteResponse_descriptor_ = file->message_type(12);
  static const int DeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, result_),
  };
  DeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::default_instance_,
      DeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteResponse));
  DeleteRefreshRequest_descriptor_ = file->message_type(13);
  static const int DeleteRefreshRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshRequest, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshRequest, serialised_delete_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshRequest, serialised_delete_request_signature_),
  };
  DeleteRefreshRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRefreshRequest_descriptor_,
      DeleteRefreshRequest::default_instance_,
      DeleteRefreshRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRefreshRequest));
  DeleteRefreshResponse_descriptor_ = file->message_type(14);
  static const int DeleteRefreshResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshResponse, result_),
  };
  DeleteRefreshResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRefreshResponse_descriptor_,
      DeleteRefreshResponse::default_instance_,
      DeleteRefreshResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRefreshResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRefreshResponse));
  DownlistNotification_descriptor_ = file->message_type(15);
  static const int DownlistNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistNotification, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistNotification, node_ids_),
  };
  DownlistNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownlistNotification_descriptor_,
      DownlistNotification::default_instance_,
      DownlistNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownlistNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownlistNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_2fdht_2frpcs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedValue_descriptor_, &SignedValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRequest_descriptor_, &PingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingResponse_descriptor_, &PingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindValueRequest_descriptor_, &FindValueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindValueResponse_descriptor_, &FindValueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindNodesRequest_descriptor_, &FindNodesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindNodesResponse_descriptor_, &FindNodesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRequest_descriptor_, &StoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreResponse_descriptor_, &StoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRefreshRequest_descriptor_, &StoreRefreshRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRefreshResponse_descriptor_, &StoreRefreshResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRequest_descriptor_, &DeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteResponse_descriptor_, &DeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRefreshRequest_descriptor_, &DeleteRefreshRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRefreshResponse_descriptor_, &DeleteRefreshResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownlistNotification_descriptor_, &DownlistNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_2fdht_2frpcs_2eproto() {
  delete SignedValue::default_instance_;
  delete SignedValue_reflection_;
  delete PingRequest::default_instance_;
  delete PingRequest_reflection_;
  delete PingResponse::default_instance_;
  delete PingResponse_reflection_;
  delete FindValueRequest::default_instance_;
  delete FindValueRequest_reflection_;
  delete FindValueResponse::default_instance_;
  delete FindValueResponse_reflection_;
  delete FindNodesRequest::default_instance_;
  delete FindNodesRequest_reflection_;
  delete FindNodesResponse::default_instance_;
  delete FindNodesResponse_reflection_;
  delete StoreRequest::default_instance_;
  delete StoreRequest_reflection_;
  delete StoreResponse::default_instance_;
  delete StoreResponse_reflection_;
  delete StoreRefreshRequest::default_instance_;
  delete StoreRefreshRequest_reflection_;
  delete StoreRefreshResponse::default_instance_;
  delete StoreRefreshResponse_reflection_;
  delete DeleteRequest::default_instance_;
  delete DeleteRequest_reflection_;
  delete DeleteResponse::default_instance_;
  delete DeleteResponse_reflection_;
  delete DeleteRefreshRequest::default_instance_;
  delete DeleteRefreshRequest_reflection_;
  delete DeleteRefreshResponse::default_instance_;
  delete DeleteRefreshResponse_reflection_;
  delete DownlistNotification::default_instance_;
  delete DownlistNotification_reflection_;
}

void protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maidsafe::dht::protobuf::protobuf_AddDesc_maidsafe_2fdht_2fkademlia_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027maidsafe/dht/rpcs.proto\022\025maidsafe.dht."
    "protobuf\032\033maidsafe/dht/kademlia.proto\"/\n"
    "\013SignedValue\022\r\n\005value\030\001 \002(\014\022\021\n\tsignature"
    "\030\002 \002(\014\"K\n\013PingRequest\022.\n\006sender\030\001 \002(\0132\036."
    "maidsafe.dht.protobuf.Contact\022\014\n\004ping\030\002 "
    "\002(\014\"\034\n\014PingResponse\022\014\n\004echo\030\001 \002(\014\"l\n\020Fin"
    "dValueRequest\022.\n\006sender\030\001 \002(\0132\036.maidsafe"
    ".dht.protobuf.Contact\022\013\n\003key\030\002 \002(\014\022\033\n\023nu"
    "m_nodes_requested\030\003 \001(\005\"\321\001\n\021FindValueRes"
    "ponse\022\016\n\006result\030\001 \002(\010\0225\n\rclosest_nodes\030\002"
    " \003(\0132\036.maidsafe.dht.protobuf.Contact\0229\n\r"
    "signed_values\030\003 \003(\0132\".maidsafe.dht.proto"
    "buf.SignedValue\022:\n\022cached_copy_holder\030\004 "
    "\001(\0132\036.maidsafe.dht.protobuf.Contact\"l\n\020F"
    "indNodesRequest\022.\n\006sender\030\001 \002(\0132\036.maidsa"
    "fe.dht.protobuf.Contact\022\013\n\003key\030\002 \002(\014\022\033\n\023"
    "num_nodes_requested\030\003 \001(\005\"Z\n\021FindNodesRe"
    "sponse\022\016\n\006result\030\001 \002(\010\0225\n\rclosest_nodes\030"
    "\002 \003(\0132\036.maidsafe.dht.protobuf.Contact\"\222\001"
    "\n\014StoreRequest\022.\n\006sender\030\001 \002(\0132\036.maidsaf"
    "e.dht.protobuf.Contact\022\013\n\003key\030\002 \002(\014\0228\n\014s"
    "igned_value\030\003 \002(\0132\".maidsafe.dht.protobu"
    "f.SignedValue\022\013\n\003ttl\030\004 \002(\005\"\037\n\rStoreRespo"
    "nse\022\016\n\006result\030\001 \002(\010\"\223\001\n\023StoreRefreshRequ"
    "est\022.\n\006sender\030\001 \002(\0132\036.maidsafe.dht.proto"
    "buf.Contact\022 \n\030serialised_store_request\030"
    "\002 \001(\014\022*\n\"serialised_store_request_signat"
    "ure\030\003 \001(\014\"&\n\024StoreRefreshResponse\022\016\n\006res"
    "ult\030\001 \002(\010\"\206\001\n\rDeleteRequest\022.\n\006sender\030\001 "
    "\002(\0132\036.maidsafe.dht.protobuf.Contact\022\013\n\003k"
    "ey\030\002 \002(\014\0228\n\014signed_value\030\003 \002(\0132\".maidsaf"
    "e.dht.protobuf.SignedValue\" \n\016DeleteResp"
    "onse\022\016\n\006result\030\001 \002(\010\"\226\001\n\024DeleteRefreshRe"
    "quest\022.\n\006sender\030\001 \002(\0132\036.maidsafe.dht.pro"
    "tobuf.Contact\022!\n\031serialised_delete_reque"
    "st\030\002 \001(\014\022+\n#serialised_delete_request_si"
    "gnature\030\003 \001(\014\"\'\n\025DeleteRefreshResponse\022\016"
    "\n\006result\030\001 \002(\010\"X\n\024DownlistNotification\022."
    "\n\006sender\030\001 \002(\0132\036.maidsafe.dht.protobuf.C"
    "ontact\022\020\n\010node_ids\030\002 \003(\014", 1584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe/dht/rpcs.proto", &protobuf_RegisterTypes);
  SignedValue::default_instance_ = new SignedValue();
  PingRequest::default_instance_ = new PingRequest();
  PingResponse::default_instance_ = new PingResponse();
  FindValueRequest::default_instance_ = new FindValueRequest();
  FindValueResponse::default_instance_ = new FindValueResponse();
  FindNodesRequest::default_instance_ = new FindNodesRequest();
  FindNodesResponse::default_instance_ = new FindNodesResponse();
  StoreRequest::default_instance_ = new StoreRequest();
  StoreResponse::default_instance_ = new StoreResponse();
  StoreRefreshRequest::default_instance_ = new StoreRefreshRequest();
  StoreRefreshResponse::default_instance_ = new StoreRefreshResponse();
  DeleteRequest::default_instance_ = new DeleteRequest();
  DeleteResponse::default_instance_ = new DeleteResponse();
  DeleteRefreshRequest::default_instance_ = new DeleteRefreshRequest();
  DeleteRefreshResponse::default_instance_ = new DeleteRefreshResponse();
  DownlistNotification::default_instance_ = new DownlistNotification();
  SignedValue::default_instance_->InitAsDefaultInstance();
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  FindValueRequest::default_instance_->InitAsDefaultInstance();
  FindValueResponse::default_instance_->InitAsDefaultInstance();
  FindNodesRequest::default_instance_->InitAsDefaultInstance();
  FindNodesResponse::default_instance_->InitAsDefaultInstance();
  StoreRequest::default_instance_->InitAsDefaultInstance();
  StoreResponse::default_instance_->InitAsDefaultInstance();
  StoreRefreshRequest::default_instance_->InitAsDefaultInstance();
  StoreRefreshResponse::default_instance_->InitAsDefaultInstance();
  DeleteRequest::default_instance_->InitAsDefaultInstance();
  DeleteResponse::default_instance_->InitAsDefaultInstance();
  DeleteRefreshRequest::default_instance_->InitAsDefaultInstance();
  DeleteRefreshResponse::default_instance_->InitAsDefaultInstance();
  DownlistNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2fdht_2frpcs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2fdht_2frpcs_2eproto {
  StaticDescriptorInitializer_maidsafe_2fdht_2frpcs_2eproto() {
    protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();
  }
} static_descriptor_initializer_maidsafe_2fdht_2frpcs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SignedValue::kValueFieldNumber;
const int SignedValue::kSignatureFieldNumber;
#endif  // !_MSC_VER

SignedValue::SignedValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedValue::InitAsDefaultInstance() {
}

SignedValue::SignedValue(const SignedValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedValue::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedValue::~SignedValue() {
  SharedDtor();
}

void SignedValue::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void SignedValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedValue_descriptor_;
}

const SignedValue& SignedValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

SignedValue* SignedValue::default_instance_ = NULL;

SignedValue* SignedValue::New() const {
  return new SignedValue;
}

void SignedValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(), output);
  }
  
  // required bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }
  
  // required bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedValue::MergeFrom(const SignedValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedValue::CopyFrom(const SignedValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SignedValue::Swap(SignedValue* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedValue_descriptor_;
  metadata.reflection = SignedValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingRequest::kSenderFieldNumber;
const int PingRequest::kPingFieldNumber;
#endif  // !_MSC_VER

PingRequest::PingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRequest::~PingRequest() {
  SharedDtor();
}

void PingRequest::SharedDtor() {
  if (ping_ != &::google::protobuf::internal::kEmptyString) {
    delete ping_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

void PingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_ping()) {
      if (ping_ != &::google::protobuf::internal::kEmptyString) {
        ping_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ping;
        break;
      }
      
      // required bytes ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // required bytes ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ping(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // required bytes ping = 2;
  if (has_ping()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ping(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // required bytes ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ping());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(ping_, other->ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingRequest_descriptor_;
  metadata.reflection = PingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingResponse::kEchoFieldNumber;
#endif  // !_MSC_VER

PingResponse::PingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingResponse::InitAsDefaultInstance() {
}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingResponse::SharedCtor() {
  _cached_size_ = 0;
  echo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingResponse::~PingResponse() {
  SharedDtor();
}

void PingResponse::SharedDtor() {
  if (echo_ != &::google::protobuf::internal::kEmptyString) {
    delete echo_;
  }
  if (this != default_instance_) {
  }
}

void PingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_descriptor_;
}

const PingResponse& PingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New() const {
  return new PingResponse;
}

void PingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_echo()) {
      if (echo_ != &::google::protobuf::internal::kEmptyString) {
        echo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes echo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_echo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes echo = 1;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->echo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes echo = 1;
  if (has_echo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->echo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes echo = 1;
    if (has_echo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->echo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_echo()) {
      set_echo(from.echo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PingResponse::Swap(PingResponse* other) {
  if (other != this) {
    std::swap(echo_, other->echo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingResponse_descriptor_;
  metadata.reflection = PingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindValueRequest::kSenderFieldNumber;
const int FindValueRequest::kKeyFieldNumber;
const int FindValueRequest::kNumNodesRequestedFieldNumber;
#endif  // !_MSC_VER

FindValueRequest::FindValueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindValueRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

FindValueRequest::FindValueRequest(const FindValueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindValueRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_nodes_requested_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindValueRequest::~FindValueRequest() {
  SharedDtor();
}

void FindValueRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void FindValueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindValueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindValueRequest_descriptor_;
}

const FindValueRequest& FindValueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

FindValueRequest* FindValueRequest::default_instance_ = NULL;

FindValueRequest* FindValueRequest::New() const {
  return new FindValueRequest;
}

void FindValueRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    num_nodes_requested_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindValueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_nodes_requested;
        break;
      }
      
      // optional int32 num_nodes_requested = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_nodes_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_nodes_requested_)));
          set_has_num_nodes_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindValueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // optional int32 num_nodes_requested = 3;
  if (has_num_nodes_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_nodes_requested(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindValueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // optional int32 num_nodes_requested = 3;
  if (has_num_nodes_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_nodes_requested(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindValueRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional int32 num_nodes_requested = 3;
    if (has_num_nodes_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_nodes_requested());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindValueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindValueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindValueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindValueRequest::MergeFrom(const FindValueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_num_nodes_requested()) {
      set_num_nodes_requested(from.num_nodes_requested());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindValueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindValueRequest::CopyFrom(const FindValueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindValueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void FindValueRequest::Swap(FindValueRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(key_, other->key_);
    std::swap(num_nodes_requested_, other->num_nodes_requested_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindValueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindValueRequest_descriptor_;
  metadata.reflection = FindValueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindValueResponse::kResultFieldNumber;
const int FindValueResponse::kClosestNodesFieldNumber;
const int FindValueResponse::kSignedValuesFieldNumber;
const int FindValueResponse::kCachedCopyHolderFieldNumber;
#endif  // !_MSC_VER

FindValueResponse::FindValueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindValueResponse::InitAsDefaultInstance() {
  cached_copy_holder_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

FindValueResponse::FindValueResponse(const FindValueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindValueResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  cached_copy_holder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindValueResponse::~FindValueResponse() {
  SharedDtor();
}

void FindValueResponse::SharedDtor() {
  if (this != default_instance_) {
    delete cached_copy_holder_;
  }
}

void FindValueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindValueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindValueResponse_descriptor_;
}

const FindValueResponse& FindValueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

FindValueResponse* FindValueResponse::default_instance_ = NULL;

FindValueResponse* FindValueResponse::New() const {
  return new FindValueResponse;
}

void FindValueResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_cached_copy_holder()) {
      if (cached_copy_holder_ != NULL) cached_copy_holder_->::maidsafe::dht::protobuf::Contact::Clear();
    }
  }
  closest_nodes_.Clear();
  signed_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindValueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_closest_nodes;
        break;
      }
      
      // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closest_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_closest_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_closest_nodes;
        if (input->ExpectTag(26)) goto parse_signed_values;
        break;
      }
      
      // repeated .maidsafe.dht.protobuf.SignedValue signed_values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signed_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signed_values;
        if (input->ExpectTag(34)) goto parse_cached_copy_holder;
        break;
      }
      
      // optional .maidsafe.dht.protobuf.Contact cached_copy_holder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cached_copy_holder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cached_copy_holder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindValueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->closest_nodes(i), output);
  }
  
  // repeated .maidsafe.dht.protobuf.SignedValue signed_values = 3;
  for (int i = 0; i < this->signed_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signed_values(i), output);
  }
  
  // optional .maidsafe.dht.protobuf.Contact cached_copy_holder = 4;
  if (has_cached_copy_holder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cached_copy_holder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindValueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->closest_nodes(i), target);
  }
  
  // repeated .maidsafe.dht.protobuf.SignedValue signed_values = 3;
  for (int i = 0; i < this->signed_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signed_values(i), target);
  }
  
  // optional .maidsafe.dht.protobuf.Contact cached_copy_holder = 4;
  if (has_cached_copy_holder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cached_copy_holder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindValueResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional .maidsafe.dht.protobuf.Contact cached_copy_holder = 4;
    if (has_cached_copy_holder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cached_copy_holder());
    }
    
  }
  // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
  total_size += 1 * this->closest_nodes_size();
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->closest_nodes(i));
  }
  
  // repeated .maidsafe.dht.protobuf.SignedValue signed_values = 3;
  total_size += 1 * this->signed_values_size();
  for (int i = 0; i < this->signed_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signed_values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindValueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindValueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindValueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindValueResponse::MergeFrom(const FindValueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  closest_nodes_.MergeFrom(from.closest_nodes_);
  signed_values_.MergeFrom(from.signed_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cached_copy_holder()) {
      mutable_cached_copy_holder()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.cached_copy_holder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindValueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindValueResponse::CopyFrom(const FindValueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindValueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < closest_nodes_size(); i++) {
    if (!this->closest_nodes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < signed_values_size(); i++) {
    if (!this->signed_values(i).IsInitialized()) return false;
  }
  if (has_cached_copy_holder()) {
    if (!this->cached_copy_holder().IsInitialized()) return false;
  }
  return true;
}

void FindValueResponse::Swap(FindValueResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    closest_nodes_.Swap(&other->closest_nodes_);
    signed_values_.Swap(&other->signed_values_);
    std::swap(cached_copy_holder_, other->cached_copy_holder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindValueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindValueResponse_descriptor_;
  metadata.reflection = FindValueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindNodesRequest::kSenderFieldNumber;
const int FindNodesRequest::kKeyFieldNumber;
const int FindNodesRequest::kNumNodesRequestedFieldNumber;
#endif  // !_MSC_VER

FindNodesRequest::FindNodesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindNodesRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

FindNodesRequest::FindNodesRequest(const FindNodesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindNodesRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_nodes_requested_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindNodesRequest::~FindNodesRequest() {
  SharedDtor();
}

void FindNodesRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void FindNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindNodesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindNodesRequest_descriptor_;
}

const FindNodesRequest& FindNodesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

FindNodesRequest* FindNodesRequest::default_instance_ = NULL;

FindNodesRequest* FindNodesRequest::New() const {
  return new FindNodesRequest;
}

void FindNodesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    num_nodes_requested_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_nodes_requested;
        break;
      }
      
      // optional int32 num_nodes_requested = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_nodes_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_nodes_requested_)));
          set_has_num_nodes_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // optional int32 num_nodes_requested = 3;
  if (has_num_nodes_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_nodes_requested(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindNodesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // optional int32 num_nodes_requested = 3;
  if (has_num_nodes_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_nodes_requested(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindNodesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional int32 num_nodes_requested = 3;
    if (has_num_nodes_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_nodes_requested());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindNodesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindNodesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindNodesRequest::MergeFrom(const FindNodesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_num_nodes_requested()) {
      set_num_nodes_requested(from.num_nodes_requested());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNodesRequest::CopyFrom(const FindNodesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNodesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void FindNodesRequest::Swap(FindNodesRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(key_, other->key_);
    std::swap(num_nodes_requested_, other->num_nodes_requested_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindNodesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindNodesRequest_descriptor_;
  metadata.reflection = FindNodesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindNodesResponse::kResultFieldNumber;
const int FindNodesResponse::kClosestNodesFieldNumber;
#endif  // !_MSC_VER

FindNodesResponse::FindNodesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindNodesResponse::InitAsDefaultInstance() {
}

FindNodesResponse::FindNodesResponse(const FindNodesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindNodesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindNodesResponse::~FindNodesResponse() {
  SharedDtor();
}

void FindNodesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindNodesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindNodesResponse_descriptor_;
}

const FindNodesResponse& FindNodesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

FindNodesResponse* FindNodesResponse::default_instance_ = NULL;

FindNodesResponse* FindNodesResponse::New() const {
  return new FindNodesResponse;
}

void FindNodesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  closest_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_closest_nodes;
        break;
      }
      
      // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closest_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_closest_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_closest_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->closest_nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindNodesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->closest_nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindNodesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .maidsafe.dht.protobuf.Contact closest_nodes = 2;
  total_size += 1 * this->closest_nodes_size();
  for (int i = 0; i < this->closest_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->closest_nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindNodesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindNodesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindNodesResponse::MergeFrom(const FindNodesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  closest_nodes_.MergeFrom(from.closest_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindNodesResponse::CopyFrom(const FindNodesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindNodesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < closest_nodes_size(); i++) {
    if (!this->closest_nodes(i).IsInitialized()) return false;
  }
  return true;
}

void FindNodesResponse::Swap(FindNodesResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    closest_nodes_.Swap(&other->closest_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindNodesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindNodesResponse_descriptor_;
  metadata.reflection = FindNodesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreRequest::kSenderFieldNumber;
const int StoreRequest::kKeyFieldNumber;
const int StoreRequest::kSignedValueFieldNumber;
const int StoreRequest::kTtlFieldNumber;
#endif  // !_MSC_VER

StoreRequest::StoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
  signed_value_ = const_cast< ::maidsafe::dht::protobuf::SignedValue*>(&::maidsafe::dht::protobuf::SignedValue::default_instance());
}

StoreRequest::StoreRequest(const StoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signed_value_ = NULL;
  ttl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRequest::~StoreRequest() {
  SharedDtor();
}

void StoreRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete sender_;
    delete signed_value_;
  }
}

void StoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRequest_descriptor_;
}

const StoreRequest& StoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

StoreRequest* StoreRequest::default_instance_ = NULL;

StoreRequest* StoreRequest::New() const {
  return new StoreRequest;
}

void StoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_signed_value()) {
      if (signed_value_ != NULL) signed_value_->::maidsafe::dht::protobuf::SignedValue::Clear();
    }
    ttl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signed_value;
        break;
      }
      
      // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signed_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }
      
      // required int32 ttl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
  if (has_signed_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signed_value(), output);
  }
  
  // required int32 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ttl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
  if (has_signed_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signed_value(), target);
  }
  
  // required int32 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ttl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
    if (has_signed_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signed_value());
    }
    
    // required int32 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRequest::MergeFrom(const StoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_signed_value()) {
      mutable_signed_value()->::maidsafe::dht::protobuf::SignedValue::MergeFrom(from.signed_value());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::CopyFrom(const StoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  if (has_signed_value()) {
    if (!this->signed_value().IsInitialized()) return false;
  }
  return true;
}

void StoreRequest::Swap(StoreRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(key_, other->key_);
    std::swap(signed_value_, other->signed_value_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreRequest_descriptor_;
  metadata.reflection = StoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreResponse::kResultFieldNumber;
#endif  // !_MSC_VER

StoreResponse::StoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreResponse::InitAsDefaultInstance() {
}

StoreResponse::StoreResponse(const StoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreResponse::~StoreResponse() {
  SharedDtor();
}

void StoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreResponse_descriptor_;
}

const StoreResponse& StoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

StoreResponse* StoreResponse::default_instance_ = NULL;

StoreResponse* StoreResponse::New() const {
  return new StoreResponse;
}

void StoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreResponse::MergeFrom(const StoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreResponse::CopyFrom(const StoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StoreResponse::Swap(StoreResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreResponse_descriptor_;
  metadata.reflection = StoreResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreRefreshRequest::kSenderFieldNumber;
const int StoreRefreshRequest::kSerialisedStoreRequestFieldNumber;
const int StoreRefreshRequest::kSerialisedStoreRequestSignatureFieldNumber;
#endif  // !_MSC_VER

StoreRefreshRequest::StoreRefreshRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreRefreshRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

StoreRefreshRequest::StoreRefreshRequest(const StoreRefreshRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreRefreshRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  serialised_store_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialised_store_request_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRefreshRequest::~StoreRefreshRequest() {
  SharedDtor();
}

void StoreRefreshRequest::SharedDtor() {
  if (serialised_store_request_ != &::google::protobuf::internal::kEmptyString) {
    delete serialised_store_request_;
  }
  if (serialised_store_request_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete serialised_store_request_signature_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void StoreRefreshRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreRefreshRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRefreshRequest_descriptor_;
}

const StoreRefreshRequest& StoreRefreshRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

StoreRefreshRequest* StoreRefreshRequest::default_instance_ = NULL;

StoreRefreshRequest* StoreRefreshRequest::New() const {
  return new StoreRefreshRequest;
}

void StoreRefreshRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_serialised_store_request()) {
      if (serialised_store_request_ != &::google::protobuf::internal::kEmptyString) {
        serialised_store_request_->clear();
      }
    }
    if (has_serialised_store_request_signature()) {
      if (serialised_store_request_signature_ != &::google::protobuf::internal::kEmptyString) {
        serialised_store_request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialised_store_request;
        break;
      }
      
      // optional bytes serialised_store_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_store_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_store_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serialised_store_request_signature;
        break;
      }
      
      // optional bytes serialised_store_request_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_store_request_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_store_request_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // optional bytes serialised_store_request = 2;
  if (has_serialised_store_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialised_store_request(), output);
  }
  
  // optional bytes serialised_store_request_signature = 3;
  if (has_serialised_store_request_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->serialised_store_request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRefreshRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // optional bytes serialised_store_request = 2;
  if (has_serialised_store_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialised_store_request(), target);
  }
  
  // optional bytes serialised_store_request_signature = 3;
  if (has_serialised_store_request_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->serialised_store_request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRefreshRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // optional bytes serialised_store_request = 2;
    if (has_serialised_store_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_store_request());
    }
    
    // optional bytes serialised_store_request_signature = 3;
    if (has_serialised_store_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_store_request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRefreshRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRefreshRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRefreshRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRefreshRequest::MergeFrom(const StoreRefreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_serialised_store_request()) {
      set_serialised_store_request(from.serialised_store_request());
    }
    if (from.has_serialised_store_request_signature()) {
      set_serialised_store_request_signature(from.serialised_store_request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRefreshRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRefreshRequest::CopyFrom(const StoreRefreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRefreshRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void StoreRefreshRequest::Swap(StoreRefreshRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(serialised_store_request_, other->serialised_store_request_);
    std::swap(serialised_store_request_signature_, other->serialised_store_request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreRefreshRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreRefreshRequest_descriptor_;
  metadata.reflection = StoreRefreshRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreRefreshResponse::kResultFieldNumber;
#endif  // !_MSC_VER

StoreRefreshResponse::StoreRefreshResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreRefreshResponse::InitAsDefaultInstance() {
}

StoreRefreshResponse::StoreRefreshResponse(const StoreRefreshResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreRefreshResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRefreshResponse::~StoreRefreshResponse() {
  SharedDtor();
}

void StoreRefreshResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreRefreshResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreRefreshResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRefreshResponse_descriptor_;
}

const StoreRefreshResponse& StoreRefreshResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

StoreRefreshResponse* StoreRefreshResponse::default_instance_ = NULL;

StoreRefreshResponse* StoreRefreshResponse::New() const {
  return new StoreRefreshResponse;
}

void StoreRefreshResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRefreshResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRefreshResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRefreshResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRefreshResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRefreshResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRefreshResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRefreshResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRefreshResponse::MergeFrom(const StoreRefreshResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRefreshResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRefreshResponse::CopyFrom(const StoreRefreshResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRefreshResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StoreRefreshResponse::Swap(StoreRefreshResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreRefreshResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreRefreshResponse_descriptor_;
  metadata.reflection = StoreRefreshResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRequest::kSenderFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
const int DeleteRequest::kSignedValueFieldNumber;
#endif  // !_MSC_VER

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
  signed_value_ = const_cast< ::maidsafe::dht::protobuf::SignedValue*>(&::maidsafe::dht::protobuf::SignedValue::default_instance());
}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signed_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRequest::~DeleteRequest() {
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete sender_;
    delete signed_value_;
  }
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

DeleteRequest* DeleteRequest::default_instance_ = NULL;

DeleteRequest* DeleteRequest::New() const {
  return new DeleteRequest;
}

void DeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_signed_value()) {
      if (signed_value_ != NULL) signed_value_->::maidsafe::dht::protobuf::SignedValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signed_value;
        break;
      }
      
      // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signed_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
  if (has_signed_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signed_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
  if (has_signed_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signed_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // required .maidsafe.dht.protobuf.SignedValue signed_value = 3;
    if (has_signed_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signed_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_signed_value()) {
      mutable_signed_value()->::maidsafe::dht::protobuf::SignedValue::MergeFrom(from.signed_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  if (has_signed_value()) {
    if (!this->signed_value().IsInitialized()) return false;
  }
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(key_, other->key_);
    std::swap(signed_value_, other->signed_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequest_descriptor_;
  metadata.reflection = DeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteResponse::InitAsDefaultInstance() {
}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteResponse::~DeleteResponse() {
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

DeleteResponse* DeleteResponse::default_instance_ = NULL;

DeleteResponse* DeleteResponse::New() const {
  return new DeleteResponse;
}

void DeleteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponse_descriptor_;
  metadata.reflection = DeleteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRefreshRequest::kSenderFieldNumber;
const int DeleteRefreshRequest::kSerialisedDeleteRequestFieldNumber;
const int DeleteRefreshRequest::kSerialisedDeleteRequestSignatureFieldNumber;
#endif  // !_MSC_VER

DeleteRefreshRequest::DeleteRefreshRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteRefreshRequest::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

DeleteRefreshRequest::DeleteRefreshRequest(const DeleteRefreshRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRefreshRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  serialised_delete_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialised_delete_request_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRefreshRequest::~DeleteRefreshRequest() {
  SharedDtor();
}

void DeleteRefreshRequest::SharedDtor() {
  if (serialised_delete_request_ != &::google::protobuf::internal::kEmptyString) {
    delete serialised_delete_request_;
  }
  if (serialised_delete_request_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete serialised_delete_request_signature_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void DeleteRefreshRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRefreshRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRefreshRequest_descriptor_;
}

const DeleteRefreshRequest& DeleteRefreshRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

DeleteRefreshRequest* DeleteRefreshRequest::default_instance_ = NULL;

DeleteRefreshRequest* DeleteRefreshRequest::New() const {
  return new DeleteRefreshRequest;
}

void DeleteRefreshRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
    if (has_serialised_delete_request()) {
      if (serialised_delete_request_ != &::google::protobuf::internal::kEmptyString) {
        serialised_delete_request_->clear();
      }
    }
    if (has_serialised_delete_request_signature()) {
      if (serialised_delete_request_signature_ != &::google::protobuf::internal::kEmptyString) {
        serialised_delete_request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialised_delete_request;
        break;
      }
      
      // optional bytes serialised_delete_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_delete_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_delete_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serialised_delete_request_signature;
        break;
      }
      
      // optional bytes serialised_delete_request_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialised_delete_request_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialised_delete_request_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // optional bytes serialised_delete_request = 2;
  if (has_serialised_delete_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialised_delete_request(), output);
  }
  
  // optional bytes serialised_delete_request_signature = 3;
  if (has_serialised_delete_request_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->serialised_delete_request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRefreshRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // optional bytes serialised_delete_request = 2;
  if (has_serialised_delete_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialised_delete_request(), target);
  }
  
  // optional bytes serialised_delete_request_signature = 3;
  if (has_serialised_delete_request_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->serialised_delete_request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRefreshRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // optional bytes serialised_delete_request = 2;
    if (has_serialised_delete_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_delete_request());
    }
    
    // optional bytes serialised_delete_request_signature = 3;
    if (has_serialised_delete_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialised_delete_request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRefreshRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRefreshRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRefreshRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRefreshRequest::MergeFrom(const DeleteRefreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
    if (from.has_serialised_delete_request()) {
      set_serialised_delete_request(from.serialised_delete_request());
    }
    if (from.has_serialised_delete_request_signature()) {
      set_serialised_delete_request_signature(from.serialised_delete_request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRefreshRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRefreshRequest::CopyFrom(const DeleteRefreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRefreshRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void DeleteRefreshRequest::Swap(DeleteRefreshRequest* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(serialised_delete_request_, other->serialised_delete_request_);
    std::swap(serialised_delete_request_signature_, other->serialised_delete_request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRefreshRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRefreshRequest_descriptor_;
  metadata.reflection = DeleteRefreshRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRefreshResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteRefreshResponse::DeleteRefreshResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteRefreshResponse::InitAsDefaultInstance() {
}

DeleteRefreshResponse::DeleteRefreshResponse(const DeleteRefreshResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRefreshResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRefreshResponse::~DeleteRefreshResponse() {
  SharedDtor();
}

void DeleteRefreshResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteRefreshResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRefreshResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRefreshResponse_descriptor_;
}

const DeleteRefreshResponse& DeleteRefreshResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

DeleteRefreshResponse* DeleteRefreshResponse::default_instance_ = NULL;

DeleteRefreshResponse* DeleteRefreshResponse::New() const {
  return new DeleteRefreshResponse;
}

void DeleteRefreshResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRefreshResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRefreshResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRefreshResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRefreshResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRefreshResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRefreshResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRefreshResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRefreshResponse::MergeFrom(const DeleteRefreshResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRefreshResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRefreshResponse::CopyFrom(const DeleteRefreshResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRefreshResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteRefreshResponse::Swap(DeleteRefreshResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRefreshResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRefreshResponse_descriptor_;
  metadata.reflection = DeleteRefreshResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownlistNotification::kSenderFieldNumber;
const int DownlistNotification::kNodeIdsFieldNumber;
#endif  // !_MSC_VER

DownlistNotification::DownlistNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownlistNotification::InitAsDefaultInstance() {
  sender_ = const_cast< ::maidsafe::dht::protobuf::Contact*>(&::maidsafe::dht::protobuf::Contact::default_instance());
}

DownlistNotification::DownlistNotification(const DownlistNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownlistNotification::SharedCtor() {
  _cached_size_ = 0;
  sender_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownlistNotification::~DownlistNotification() {
  SharedDtor();
}

void DownlistNotification::SharedDtor() {
  if (this != default_instance_) {
    delete sender_;
  }
}

void DownlistNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownlistNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownlistNotification_descriptor_;
}

const DownlistNotification& DownlistNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2fdht_2frpcs_2eproto();  return *default_instance_;
}

DownlistNotification* DownlistNotification::default_instance_ = NULL;

DownlistNotification* DownlistNotification::New() const {
  return new DownlistNotification;
}

void DownlistNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != NULL) sender_->::maidsafe::dht::protobuf::Contact::Clear();
    }
  }
  node_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownlistNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.dht.protobuf.Contact sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_ids;
        break;
      }
      
      // repeated bytes node_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_node_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownlistNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender(), output);
  }
  
  // repeated bytes node_ids = 2;
  for (int i = 0; i < this->node_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->node_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownlistNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.dht.protobuf.Contact sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender(), target);
  }
  
  // repeated bytes node_ids = 2;
  for (int i = 0; i < this->node_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->node_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownlistNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.dht.protobuf.Contact sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
  }
  // repeated bytes node_ids = 2;
  total_size += 1 * this->node_ids_size();
  for (int i = 0; i < this->node_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->node_ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownlistNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownlistNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownlistNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownlistNotification::MergeFrom(const DownlistNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_ids_.MergeFrom(from.node_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      mutable_sender()->::maidsafe::dht::protobuf::Contact::MergeFrom(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownlistNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownlistNotification::CopyFrom(const DownlistNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownlistNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void DownlistNotification::Swap(DownlistNotification* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    node_ids_.Swap(&other->node_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownlistNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownlistNotification_descriptor_;
  metadata.reflection = DownlistNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace dht
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
