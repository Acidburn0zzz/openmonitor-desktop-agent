// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace transport {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Endpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Endpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WrapperMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WrapperMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManagedEndpointMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagedEndpointMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NatDetectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NatDetectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NatDetectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NatDetectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardRendezvousRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardRendezvousRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardRendezvousResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardRendezvousResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendezvousRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendezvousRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendezvousAcknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendezvousAcknowledgement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto() {
  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe/transport/transport.proto");
  GOOGLE_CHECK(file != NULL);
  Endpoint_descriptor_ = file->message_type(0);
  static const int Endpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, port_),
  };
  Endpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Endpoint_descriptor_,
      Endpoint::default_instance_,
      Endpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Endpoint));
  Contact_descriptor_ = file->message_type(1);
  static const int Contact_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, local_ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, rendezvous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, tcp443_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, tcp80_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, prefer_local_),
  };
  Contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contact_descriptor_,
      Contact::default_instance_,
      Contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contact));
  ConnectRequest_descriptor_ = file->message_type(2);
  static const int ConnectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, rendezvous_),
  };
  ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRequest));
  ConnectResponse_descriptor_ = file->message_type(3);
  static const int ConnectResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, rendezvous_),
  };
  ConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectResponse_descriptor_,
      ConnectResponse::default_instance_,
      ConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectResponse));
  WrapperMessage_descriptor_ = file->message_type(4);
  static const int WrapperMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, message_signature_),
  };
  WrapperMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WrapperMessage_descriptor_,
      WrapperMessage::default_instance_,
      WrapperMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WrapperMessage));
  ManagedEndpointMessage_descriptor_ = file->message_type(5);
  static const int ManagedEndpointMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, retry_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, retry_frequency_),
  };
  ManagedEndpointMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManagedEndpointMessage_descriptor_,
      ManagedEndpointMessage::default_instance_,
      ManagedEndpointMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedEndpointMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManagedEndpointMessage));
  NatDetectionRequest_descriptor_ = file->message_type(6);
  static const int NatDetectionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, local_ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, full_detection_),
  };
  NatDetectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NatDetectionRequest_descriptor_,
      NatDetectionRequest::default_instance_,
      NatDetectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NatDetectionRequest));
  NatDetectionResponse_descriptor_ = file->message_type(7);
  static const int NatDetectionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, nat_type_),
  };
  NatDetectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NatDetectionResponse_descriptor_,
      NatDetectionResponse::default_instance_,
      NatDetectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NatDetectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NatDetectionResponse));
  ProxyConnectRequest_descriptor_ = file->message_type(8);
  static const int ProxyConnectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectRequest, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectRequest, rendezvous_connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectRequest, rendezvous_),
  };
  ProxyConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyConnectRequest_descriptor_,
      ProxyConnectRequest::default_instance_,
      ProxyConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyConnectRequest));
  ProxyConnectResponse_descriptor_ = file->message_type(9);
  static const int ProxyConnectResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectResponse, result_),
  };
  ProxyConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyConnectResponse_descriptor_,
      ProxyConnectResponse::default_instance_,
      ProxyConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyConnectResponse));
  ForwardRendezvousRequest_descriptor_ = file->message_type(10);
  static const int ForwardRendezvousRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRendezvousRequest, receiver_endpoint_),
  };
  ForwardRendezvousRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardRendezvousRequest_descriptor_,
      ForwardRendezvousRequest::default_instance_,
      ForwardRendezvousRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRendezvousRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRendezvousRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardRendezvousRequest));
  ForwardRendezvousResponse_descriptor_ = file->message_type(11);
  static const int ForwardRendezvousResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRendezvousResponse, receiver_rendezvous_endpoint_),
  };
  ForwardRendezvousResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardRendezvousResponse_descriptor_,
      ForwardRendezvousResponse::default_instance_,
      ForwardRendezvousResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRendezvousResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRendezvousResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardRendezvousResponse));
  RendezvousRequest_descriptor_ = file->message_type(12);
  static const int RendezvousRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendezvousRequest, proxy_endpoint_),
  };
  RendezvousRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RendezvousRequest_descriptor_,
      RendezvousRequest::default_instance_,
      RendezvousRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendezvousRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendezvousRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RendezvousRequest));
  RendezvousAcknowledgement_descriptor_ = file->message_type(13);
  static const int RendezvousAcknowledgement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendezvousAcknowledgement, originator_endpoint_),
  };
  RendezvousAcknowledgement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RendezvousAcknowledgement_descriptor_,
      RendezvousAcknowledgement::default_instance_,
      RendezvousAcknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendezvousAcknowledgement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendezvousAcknowledgement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RendezvousAcknowledgement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Endpoint_descriptor_, &Endpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contact_descriptor_, &Contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectResponse_descriptor_, &ConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WrapperMessage_descriptor_, &WrapperMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManagedEndpointMessage_descriptor_, &ManagedEndpointMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NatDetectionRequest_descriptor_, &NatDetectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NatDetectionResponse_descriptor_, &NatDetectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyConnectRequest_descriptor_, &ProxyConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyConnectResponse_descriptor_, &ProxyConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardRendezvousRequest_descriptor_, &ForwardRendezvousRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardRendezvousResponse_descriptor_, &ForwardRendezvousResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RendezvousRequest_descriptor_, &RendezvousRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RendezvousAcknowledgement_descriptor_, &RendezvousAcknowledgement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto() {
  delete Endpoint::default_instance_;
  delete Endpoint_reflection_;
  delete Contact::default_instance_;
  delete Contact_reflection_;
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectResponse::default_instance_;
  delete ConnectResponse_reflection_;
  delete WrapperMessage::default_instance_;
  delete WrapperMessage_reflection_;
  delete ManagedEndpointMessage::default_instance_;
  delete ManagedEndpointMessage_reflection_;
  delete NatDetectionRequest::default_instance_;
  delete NatDetectionRequest_reflection_;
  delete NatDetectionResponse::default_instance_;
  delete NatDetectionResponse_reflection_;
  delete ProxyConnectRequest::default_instance_;
  delete ProxyConnectRequest_reflection_;
  delete ProxyConnectResponse::default_instance_;
  delete ProxyConnectResponse_reflection_;
  delete ForwardRendezvousRequest::default_instance_;
  delete ForwardRendezvousRequest_reflection_;
  delete ForwardRendezvousResponse::default_instance_;
  delete ForwardRendezvousResponse_reflection_;
  delete RendezvousRequest::default_instance_;
  delete RendezvousRequest_reflection_;
  delete RendezvousAcknowledgement::default_instance_;
  delete RendezvousAcknowledgement_reflection_;
}

void protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"maidsafe/transport/transport.proto\022\033ma"
    "idsafe.transport.protobuf\"$\n\010Endpoint\022\n\n"
    "\002ip\030\001 \002(\014\022\014\n\004port\030\002 \002(\005\"\331\001\n\007Contact\0227\n\010e"
    "ndpoint\030\001 \001(\0132%.maidsafe.transport.proto"
    "buf.Endpoint\022\021\n\tlocal_ips\030\002 \003(\014\022\022\n\nlocal"
    "_port\030\003 \001(\005\0229\n\nrendezvous\030\004 \001(\0132%.maidsa"
    "fe.transport.protobuf.Endpoint\022\016\n\006tcp443"
    "\030\005 \001(\010\022\r\n\005tcp80\030\006 \001(\010\022\024\n\014prefer_local\030\007 "
    "\001(\010\"$\n\016ConnectRequest\022\022\n\nrendezvous\030\001 \002("
    "\010\"%\n\017ConnectResponse\022\022\n\nrendezvous\030\001 \002(\010"
    "\"N\n\016WrapperMessage\022\020\n\010msg_type\030\001 \002(\005\022\017\n\007"
    "payload\030\002 \002(\014\022\031\n\021message_signature\030\003 \001(\014"
    "\"\312\001\n\026ManagedEndpointMessage\0227\n\010endpoint\030"
    "\001 \001(\0132%.maidsafe.transport.protobuf.Endp"
    "oint\022\016\n\006result\030\002 \001(\010\022\022\n\nmessage_id\030\003 \001(\005"
    "\022\022\n\nidentifier\030\004 \001(\014\022\021\n\tfrequency\030\005 \001(\005\022"
    "\023\n\013retry_count\030\006 \001(\005\022\027\n\017retry_frequency\030"
    "\007 \001(\005\"T\n\023NatDetectionRequest\022\021\n\tlocal_ip"
    "s\030\001 \003(\014\022\022\n\nlocal_port\030\002 \002(\005\022\026\n\016full_dete"
    "ction\030\003 \001(\010\"a\n\024NatDetectionResponse\0227\n\010e"
    "ndpoint\030\001 \001(\0132%.maidsafe.transport.proto"
    "buf.Endpoint\022\020\n\010nat_type\030\002 \002(\005\"\245\001\n\023Proxy"
    "ConnectRequest\0227\n\010endpoint\030\001 \002(\0132%.maids"
    "afe.transport.protobuf.Endpoint\022\032\n\022rende"
    "zvous_connect\030\002 \002(\010\0229\n\nrendezvous\030\003 \001(\0132"
    "%.maidsafe.transport.protobuf.Endpoint\"&"
    "\n\024ProxyConnectResponse\022\016\n\006result\030\001 \002(\010\"\\"
    "\n\030ForwardRendezvousRequest\022@\n\021receiver_e"
    "ndpoint\030\001 \002(\0132%.maidsafe.transport.proto"
    "buf.Endpoint\"h\n\031ForwardRendezvousRespons"
    "e\022K\n\034receiver_rendezvous_endpoint\030\001 \002(\0132"
    "%.maidsafe.transport.protobuf.Endpoint\"R"
    "\n\021RendezvousRequest\022=\n\016proxy_endpoint\030\001 "
    "\002(\0132%.maidsafe.transport.protobuf.Endpoi"
    "nt\"_\n\031RendezvousAcknowledgement\022B\n\023origi"
    "nator_endpoint\030\001 \002(\0132%.maidsafe.transpor"
    "t.protobuf.Endpoint", 1459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe/transport/transport.proto", &protobuf_RegisterTypes);
  Endpoint::default_instance_ = new Endpoint();
  Contact::default_instance_ = new Contact();
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectResponse::default_instance_ = new ConnectResponse();
  WrapperMessage::default_instance_ = new WrapperMessage();
  ManagedEndpointMessage::default_instance_ = new ManagedEndpointMessage();
  NatDetectionRequest::default_instance_ = new NatDetectionRequest();
  NatDetectionResponse::default_instance_ = new NatDetectionResponse();
  ProxyConnectRequest::default_instance_ = new ProxyConnectRequest();
  ProxyConnectResponse::default_instance_ = new ProxyConnectResponse();
  ForwardRendezvousRequest::default_instance_ = new ForwardRendezvousRequest();
  ForwardRendezvousResponse::default_instance_ = new ForwardRendezvousResponse();
  RendezvousRequest::default_instance_ = new RendezvousRequest();
  RendezvousAcknowledgement::default_instance_ = new RendezvousAcknowledgement();
  Endpoint::default_instance_->InitAsDefaultInstance();
  Contact::default_instance_->InitAsDefaultInstance();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  WrapperMessage::default_instance_->InitAsDefaultInstance();
  ManagedEndpointMessage::default_instance_->InitAsDefaultInstance();
  NatDetectionRequest::default_instance_->InitAsDefaultInstance();
  NatDetectionResponse::default_instance_->InitAsDefaultInstance();
  ProxyConnectRequest::default_instance_->InitAsDefaultInstance();
  ProxyConnectResponse::default_instance_->InitAsDefaultInstance();
  ForwardRendezvousRequest::default_instance_->InitAsDefaultInstance();
  ForwardRendezvousResponse::default_instance_->InitAsDefaultInstance();
  RendezvousRequest::default_instance_->InitAsDefaultInstance();
  RendezvousAcknowledgement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_2ftransport_2ftransport_2eproto {
  StaticDescriptorInitializer_maidsafe_2ftransport_2ftransport_2eproto() {
    protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  }
} static_descriptor_initializer_maidsafe_2ftransport_2ftransport_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Endpoint::kIpFieldNumber;
const int Endpoint::kPortFieldNumber;
#endif  // !_MSC_VER

Endpoint::Endpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Endpoint::InitAsDefaultInstance() {
}

Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Endpoint::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Endpoint::~Endpoint() {
  SharedDtor();
}

void Endpoint::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Endpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Endpoint_descriptor_;
}

const Endpoint& Endpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

Endpoint* Endpoint::default_instance_ = NULL;

Endpoint* Endpoint::New() const {
  return new Endpoint;
}

void Endpoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Endpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Endpoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Endpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Endpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Endpoint_descriptor_;
  metadata.reflection = Endpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Contact::kEndpointFieldNumber;
const int Contact::kLocalIpsFieldNumber;
const int Contact::kLocalPortFieldNumber;
const int Contact::kRendezvousFieldNumber;
const int Contact::kTcp443FieldNumber;
const int Contact::kTcp80FieldNumber;
const int Contact::kPreferLocalFieldNumber;
#endif  // !_MSC_VER

Contact::Contact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Contact::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
  rendezvous_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

Contact::Contact(const Contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Contact::SharedCtor() {
  _cached_size_ = 0;
  endpoint_ = NULL;
  local_port_ = 0;
  rendezvous_ = NULL;
  tcp443_ = false;
  tcp80_ = false;
  prefer_local_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contact::~Contact() {
  SharedDtor();
}

void Contact::SharedDtor() {
  if (this != default_instance_) {
    delete endpoint_;
    delete rendezvous_;
  }
}

void Contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contact_descriptor_;
}

const Contact& Contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

Contact* Contact::default_instance_ = NULL;

Contact* Contact::New() const {
  return new Contact;
}

void Contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
    local_port_ = 0;
    if (has_rendezvous()) {
      if (rendezvous_ != NULL) rendezvous_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
    tcp443_ = false;
    tcp80_ = false;
    prefer_local_ = false;
  }
  local_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_ips;
        break;
      }
      
      // repeated bytes local_ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_local_ips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_ips;
        if (input->ExpectTag(24)) goto parse_local_port;
        break;
      }
      
      // optional int32 local_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
          set_has_local_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rendezvous;
        break;
      }
      
      // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rendezvous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rendezvous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tcp443;
        break;
      }
      
      // optional bool tcp443 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp443:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp443_)));
          set_has_tcp443();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tcp80;
        break;
      }
      
      // optional bool tcp80 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp80:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp80_)));
          set_has_tcp80();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prefer_local;
        break;
      }
      
      // optional bool prefer_local = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefer_local:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_local_)));
          set_has_prefer_local();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoint(), output);
  }
  
  // repeated bytes local_ips = 2;
  for (int i = 0; i < this->local_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->local_ips(i), output);
  }
  
  // optional int32 local_port = 3;
  if (has_local_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->local_port(), output);
  }
  
  // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 4;
  if (has_rendezvous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rendezvous(), output);
  }
  
  // optional bool tcp443 = 5;
  if (has_tcp443()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tcp443(), output);
  }
  
  // optional bool tcp80 = 6;
  if (has_tcp80()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tcp80(), output);
  }
  
  // optional bool prefer_local = 7;
  if (has_prefer_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->prefer_local(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpoint(), target);
  }
  
  // repeated bytes local_ips = 2;
  for (int i = 0; i < this->local_ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->local_ips(i), target);
  }
  
  // optional int32 local_port = 3;
  if (has_local_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->local_port(), target);
  }
  
  // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 4;
  if (has_rendezvous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rendezvous(), target);
  }
  
  // optional bool tcp443 = 5;
  if (has_tcp443()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tcp443(), target);
  }
  
  // optional bool tcp80 = 6;
  if (has_tcp80()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tcp80(), target);
  }
  
  // optional bool prefer_local = 7;
  if (has_prefer_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->prefer_local(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Contact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }
    
    // optional int32 local_port = 3;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_port());
    }
    
    // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 4;
    if (has_rendezvous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rendezvous());
    }
    
    // optional bool tcp443 = 5;
    if (has_tcp443()) {
      total_size += 1 + 1;
    }
    
    // optional bool tcp80 = 6;
    if (has_tcp80()) {
      total_size += 1 + 1;
    }
    
    // optional bool prefer_local = 7;
    if (has_prefer_local()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated bytes local_ips = 2;
  total_size += 1 * this->local_ips_size();
  for (int i = 0; i < this->local_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->local_ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_ips_.MergeFrom(from.local_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpoint()) {
      mutable_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.endpoint());
    }
    if (from.has_local_port()) {
      set_local_port(from.local_port());
    }
    if (from.has_rendezvous()) {
      mutable_rendezvous()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.rendezvous());
    }
    if (from.has_tcp443()) {
      set_tcp443(from.tcp443());
    }
    if (from.has_tcp80()) {
      set_tcp80(from.tcp80());
    }
    if (from.has_prefer_local()) {
      set_prefer_local(from.prefer_local());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  
  if (has_endpoint()) {
    if (!this->endpoint().IsInitialized()) return false;
  }
  if (has_rendezvous()) {
    if (!this->rendezvous().IsInitialized()) return false;
  }
  return true;
}

void Contact::Swap(Contact* other) {
  if (other != this) {
    std::swap(endpoint_, other->endpoint_);
    local_ips_.Swap(&other->local_ips_);
    std::swap(local_port_, other->local_port_);
    std::swap(rendezvous_, other->rendezvous_);
    std::swap(tcp443_, other->tcp443_);
    std::swap(tcp80_, other->tcp80_);
    std::swap(prefer_local_, other->prefer_local_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contact_descriptor_;
  metadata.reflection = Contact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kRendezvousFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectRequest::InitAsDefaultInstance() {
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  rendezvous_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rendezvous_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool rendezvous = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rendezvous_)));
          set_has_rendezvous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool rendezvous = 1;
  if (has_rendezvous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rendezvous(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool rendezvous = 1;
  if (has_rendezvous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rendezvous(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool rendezvous = 1;
    if (has_rendezvous()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rendezvous()) {
      set_rendezvous(from.rendezvous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(rendezvous_, other->rendezvous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kRendezvousFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectResponse::InitAsDefaultInstance() {
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  rendezvous_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectResponse_descriptor_;
}

const ConnectResponse& ConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rendezvous_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool rendezvous = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rendezvous_)));
          set_has_rendezvous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool rendezvous = 1;
  if (has_rendezvous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rendezvous(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool rendezvous = 1;
  if (has_rendezvous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rendezvous(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool rendezvous = 1;
    if (has_rendezvous()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rendezvous()) {
      set_rendezvous(from.rendezvous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    std::swap(rendezvous_, other->rendezvous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectResponse_descriptor_;
  metadata.reflection = ConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WrapperMessage::kMsgTypeFieldNumber;
const int WrapperMessage::kPayloadFieldNumber;
const int WrapperMessage::kMessageSignatureFieldNumber;
#endif  // !_MSC_VER

WrapperMessage::WrapperMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WrapperMessage::InitAsDefaultInstance() {
}

WrapperMessage::WrapperMessage(const WrapperMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WrapperMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WrapperMessage::~WrapperMessage() {
  SharedDtor();
}

void WrapperMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (message_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete message_signature_;
  }
  if (this != default_instance_) {
  }
}

void WrapperMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WrapperMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WrapperMessage_descriptor_;
}

const WrapperMessage& WrapperMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

WrapperMessage* WrapperMessage::default_instance_ = NULL;

WrapperMessage* WrapperMessage::New() const {
  return new WrapperMessage;
}

void WrapperMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    if (has_message_signature()) {
      if (message_signature_ != &::google::protobuf::internal::kEmptyString) {
        message_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WrapperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_signature;
        break;
      }
      
      // optional bytes message_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WrapperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }
  
  // required bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  // optional bytes message_signature = 3;
  if (has_message_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->message_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WrapperMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }
  
  // required bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  // optional bytes message_signature = 3;
  if (has_message_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WrapperMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }
    
    // required bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // optional bytes message_signature = 3;
    if (has_message_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WrapperMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WrapperMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WrapperMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WrapperMessage::MergeFrom(const WrapperMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_message_signature()) {
      set_message_signature(from.message_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WrapperMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperMessage::CopyFrom(const WrapperMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WrapperMessage::Swap(WrapperMessage* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(payload_, other->payload_);
    std::swap(message_signature_, other->message_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WrapperMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WrapperMessage_descriptor_;
  metadata.reflection = WrapperMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManagedEndpointMessage::kEndpointFieldNumber;
const int ManagedEndpointMessage::kResultFieldNumber;
const int ManagedEndpointMessage::kMessageIdFieldNumber;
const int ManagedEndpointMessage::kIdentifierFieldNumber;
const int ManagedEndpointMessage::kFrequencyFieldNumber;
const int ManagedEndpointMessage::kRetryCountFieldNumber;
const int ManagedEndpointMessage::kRetryFrequencyFieldNumber;
#endif  // !_MSC_VER

ManagedEndpointMessage::ManagedEndpointMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManagedEndpointMessage::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

ManagedEndpointMessage::ManagedEndpointMessage(const ManagedEndpointMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManagedEndpointMessage::SharedCtor() {
  _cached_size_ = 0;
  endpoint_ = NULL;
  result_ = false;
  message_id_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frequency_ = 0;
  retry_count_ = 0;
  retry_frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagedEndpointMessage::~ManagedEndpointMessage() {
  SharedDtor();
}

void ManagedEndpointMessage::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete endpoint_;
  }
}

void ManagedEndpointMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagedEndpointMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagedEndpointMessage_descriptor_;
}

const ManagedEndpointMessage& ManagedEndpointMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ManagedEndpointMessage* ManagedEndpointMessage::default_instance_ = NULL;

ManagedEndpointMessage* ManagedEndpointMessage::New() const {
  return new ManagedEndpointMessage;
}

void ManagedEndpointMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
    result_ = false;
    message_id_ = 0;
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    frequency_ = 0;
    retry_count_ = 0;
    retry_frequency_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManagedEndpointMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }
      
      // optional int32 message_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_identifier;
        break;
      }
      
      // optional bytes identifier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frequency;
        break;
      }
      
      // optional int32 frequency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_retry_count;
        break;
      }
      
      // optional int32 retry_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_count_)));
          set_has_retry_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_retry_frequency;
        break;
      }
      
      // optional int32 retry_frequency = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retry_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_frequency_)));
          set_has_retry_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManagedEndpointMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoint(), output);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_id(), output);
  }
  
  // optional bytes identifier = 4;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->identifier(), output);
  }
  
  // optional int32 frequency = 5;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frequency(), output);
  }
  
  // optional int32 retry_count = 6;
  if (has_retry_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retry_count(), output);
  }
  
  // optional int32 retry_frequency = 7;
  if (has_retry_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->retry_frequency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManagedEndpointMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpoint(), target);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int32 message_id = 3;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_id(), target);
  }
  
  // optional bytes identifier = 4;
  if (has_identifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->identifier(), target);
  }
  
  // optional int32 frequency = 5;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frequency(), target);
  }
  
  // optional int32 retry_count = 6;
  if (has_retry_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->retry_count(), target);
  }
  
  // optional int32 retry_frequency = 7;
  if (has_retry_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->retry_frequency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManagedEndpointMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }
    
    // optional bytes identifier = 4;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identifier());
    }
    
    // optional int32 frequency = 5;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frequency());
    }
    
    // optional int32 retry_count = 6;
    if (has_retry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retry_count());
    }
    
    // optional int32 retry_frequency = 7;
    if (has_retry_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retry_frequency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagedEndpointMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManagedEndpointMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManagedEndpointMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManagedEndpointMessage::MergeFrom(const ManagedEndpointMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpoint()) {
      mutable_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.endpoint());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_retry_count()) {
      set_retry_count(from.retry_count());
    }
    if (from.has_retry_frequency()) {
      set_retry_frequency(from.retry_frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManagedEndpointMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagedEndpointMessage::CopyFrom(const ManagedEndpointMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagedEndpointMessage::IsInitialized() const {
  
  if (has_endpoint()) {
    if (!this->endpoint().IsInitialized()) return false;
  }
  return true;
}

void ManagedEndpointMessage::Swap(ManagedEndpointMessage* other) {
  if (other != this) {
    std::swap(endpoint_, other->endpoint_);
    std::swap(result_, other->result_);
    std::swap(message_id_, other->message_id_);
    std::swap(identifier_, other->identifier_);
    std::swap(frequency_, other->frequency_);
    std::swap(retry_count_, other->retry_count_);
    std::swap(retry_frequency_, other->retry_frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManagedEndpointMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagedEndpointMessage_descriptor_;
  metadata.reflection = ManagedEndpointMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NatDetectionRequest::kLocalIpsFieldNumber;
const int NatDetectionRequest::kLocalPortFieldNumber;
const int NatDetectionRequest::kFullDetectionFieldNumber;
#endif  // !_MSC_VER

NatDetectionRequest::NatDetectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NatDetectionRequest::InitAsDefaultInstance() {
}

NatDetectionRequest::NatDetectionRequest(const NatDetectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NatDetectionRequest::SharedCtor() {
  _cached_size_ = 0;
  local_port_ = 0;
  full_detection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NatDetectionRequest::~NatDetectionRequest() {
  SharedDtor();
}

void NatDetectionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NatDetectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NatDetectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionRequest_descriptor_;
}

const NatDetectionRequest& NatDetectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

NatDetectionRequest* NatDetectionRequest::default_instance_ = NULL;

NatDetectionRequest* NatDetectionRequest::New() const {
  return new NatDetectionRequest;
}

void NatDetectionRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    local_port_ = 0;
    full_detection_ = false;
  }
  local_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NatDetectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes local_ips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_local_ips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_local_ips;
        if (input->ExpectTag(16)) goto parse_local_port;
        break;
      }
      
      // required int32 local_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
          set_has_local_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_full_detection;
        break;
      }
      
      // optional bool full_detection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_detection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_detection_)));
          set_has_full_detection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NatDetectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes local_ips = 1;
  for (int i = 0; i < this->local_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->local_ips(i), output);
  }
  
  // required int32 local_port = 2;
  if (has_local_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->local_port(), output);
  }
  
  // optional bool full_detection = 3;
  if (has_full_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->full_detection(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NatDetectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes local_ips = 1;
  for (int i = 0; i < this->local_ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->local_ips(i), target);
  }
  
  // required int32 local_port = 2;
  if (has_local_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->local_port(), target);
  }
  
  // optional bool full_detection = 3;
  if (has_full_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->full_detection(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NatDetectionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 local_port = 2;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_port());
    }
    
    // optional bool full_detection = 3;
    if (has_full_detection()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated bytes local_ips = 1;
  total_size += 1 * this->local_ips_size();
  for (int i = 0; i < this->local_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->local_ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NatDetectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NatDetectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NatDetectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NatDetectionRequest::MergeFrom(const NatDetectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_ips_.MergeFrom(from.local_ips_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_local_port()) {
      set_local_port(from.local_port());
    }
    if (from.has_full_detection()) {
      set_full_detection(from.full_detection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NatDetectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionRequest::CopyFrom(const NatDetectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NatDetectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void NatDetectionRequest::Swap(NatDetectionRequest* other) {
  if (other != this) {
    local_ips_.Swap(&other->local_ips_);
    std::swap(local_port_, other->local_port_);
    std::swap(full_detection_, other->full_detection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NatDetectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NatDetectionRequest_descriptor_;
  metadata.reflection = NatDetectionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NatDetectionResponse::kEndpointFieldNumber;
const int NatDetectionResponse::kNatTypeFieldNumber;
#endif  // !_MSC_VER

NatDetectionResponse::NatDetectionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NatDetectionResponse::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

NatDetectionResponse::NatDetectionResponse(const NatDetectionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NatDetectionResponse::SharedCtor() {
  _cached_size_ = 0;
  endpoint_ = NULL;
  nat_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NatDetectionResponse::~NatDetectionResponse() {
  SharedDtor();
}

void NatDetectionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete endpoint_;
  }
}

void NatDetectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NatDetectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NatDetectionResponse_descriptor_;
}

const NatDetectionResponse& NatDetectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

NatDetectionResponse* NatDetectionResponse::default_instance_ = NULL;

NatDetectionResponse* NatDetectionResponse::New() const {
  return new NatDetectionResponse;
}

void NatDetectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
    nat_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NatDetectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nat_type;
        break;
      }
      
      // required int32 nat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nat_type_)));
          set_has_nat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NatDetectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoint(), output);
  }
  
  // required int32 nat_type = 2;
  if (has_nat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nat_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NatDetectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpoint(), target);
  }
  
  // required int32 nat_type = 2;
  if (has_nat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nat_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NatDetectionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }
    
    // required int32 nat_type = 2;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nat_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NatDetectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NatDetectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NatDetectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NatDetectionResponse::MergeFrom(const NatDetectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpoint()) {
      mutable_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.endpoint());
    }
    if (from.has_nat_type()) {
      set_nat_type(from.nat_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NatDetectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatDetectionResponse::CopyFrom(const NatDetectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NatDetectionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_endpoint()) {
    if (!this->endpoint().IsInitialized()) return false;
  }
  return true;
}

void NatDetectionResponse::Swap(NatDetectionResponse* other) {
  if (other != this) {
    std::swap(endpoint_, other->endpoint_);
    std::swap(nat_type_, other->nat_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NatDetectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NatDetectionResponse_descriptor_;
  metadata.reflection = NatDetectionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyConnectRequest::kEndpointFieldNumber;
const int ProxyConnectRequest::kRendezvousConnectFieldNumber;
const int ProxyConnectRequest::kRendezvousFieldNumber;
#endif  // !_MSC_VER

ProxyConnectRequest::ProxyConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyConnectRequest::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
  rendezvous_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

ProxyConnectRequest::ProxyConnectRequest(const ProxyConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  endpoint_ = NULL;
  rendezvous_connect_ = false;
  rendezvous_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyConnectRequest::~ProxyConnectRequest() {
  SharedDtor();
}

void ProxyConnectRequest::SharedDtor() {
  if (this != default_instance_) {
    delete endpoint_;
    delete rendezvous_;
  }
}

void ProxyConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyConnectRequest_descriptor_;
}

const ProxyConnectRequest& ProxyConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ProxyConnectRequest* ProxyConnectRequest::default_instance_ = NULL;

ProxyConnectRequest* ProxyConnectRequest::New() const {
  return new ProxyConnectRequest;
}

void ProxyConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
    rendezvous_connect_ = false;
    if (has_rendezvous()) {
      if (rendezvous_ != NULL) rendezvous_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.transport.protobuf.Endpoint endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rendezvous_connect;
        break;
      }
      
      // required bool rendezvous_connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rendezvous_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rendezvous_connect_)));
          set_has_rendezvous_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rendezvous;
        break;
      }
      
      // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rendezvous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rendezvous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoint(), output);
  }
  
  // required bool rendezvous_connect = 2;
  if (has_rendezvous_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rendezvous_connect(), output);
  }
  
  // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 3;
  if (has_rendezvous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rendezvous(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpoint(), target);
  }
  
  // required bool rendezvous_connect = 2;
  if (has_rendezvous_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rendezvous_connect(), target);
  }
  
  // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 3;
  if (has_rendezvous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rendezvous(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyConnectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.transport.protobuf.Endpoint endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }
    
    // required bool rendezvous_connect = 2;
    if (has_rendezvous_connect()) {
      total_size += 1 + 1;
    }
    
    // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 3;
    if (has_rendezvous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rendezvous());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyConnectRequest::MergeFrom(const ProxyConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpoint()) {
      mutable_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.endpoint());
    }
    if (from.has_rendezvous_connect()) {
      set_rendezvous_connect(from.rendezvous_connect());
    }
    if (from.has_rendezvous()) {
      mutable_rendezvous()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.rendezvous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyConnectRequest::CopyFrom(const ProxyConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_endpoint()) {
    if (!this->endpoint().IsInitialized()) return false;
  }
  if (has_rendezvous()) {
    if (!this->rendezvous().IsInitialized()) return false;
  }
  return true;
}

void ProxyConnectRequest::Swap(ProxyConnectRequest* other) {
  if (other != this) {
    std::swap(endpoint_, other->endpoint_);
    std::swap(rendezvous_connect_, other->rendezvous_connect_);
    std::swap(rendezvous_, other->rendezvous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyConnectRequest_descriptor_;
  metadata.reflection = ProxyConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyConnectResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ProxyConnectResponse::ProxyConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyConnectResponse::InitAsDefaultInstance() {
}

ProxyConnectResponse::ProxyConnectResponse(const ProxyConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyConnectResponse::~ProxyConnectResponse() {
  SharedDtor();
}

void ProxyConnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyConnectResponse_descriptor_;
}

const ProxyConnectResponse& ProxyConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ProxyConnectResponse* ProxyConnectResponse::default_instance_ = NULL;

ProxyConnectResponse* ProxyConnectResponse::New() const {
  return new ProxyConnectResponse;
}

void ProxyConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyConnectResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyConnectResponse::MergeFrom(const ProxyConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyConnectResponse::CopyFrom(const ProxyConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProxyConnectResponse::Swap(ProxyConnectResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyConnectResponse_descriptor_;
  metadata.reflection = ProxyConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardRendezvousRequest::kReceiverEndpointFieldNumber;
#endif  // !_MSC_VER

ForwardRendezvousRequest::ForwardRendezvousRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardRendezvousRequest::InitAsDefaultInstance() {
  receiver_endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

ForwardRendezvousRequest::ForwardRendezvousRequest(const ForwardRendezvousRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardRendezvousRequest::SharedCtor() {
  _cached_size_ = 0;
  receiver_endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardRendezvousRequest::~ForwardRendezvousRequest() {
  SharedDtor();
}

void ForwardRendezvousRequest::SharedDtor() {
  if (this != default_instance_) {
    delete receiver_endpoint_;
  }
}

void ForwardRendezvousRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardRendezvousRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardRendezvousRequest_descriptor_;
}

const ForwardRendezvousRequest& ForwardRendezvousRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ForwardRendezvousRequest* ForwardRendezvousRequest::default_instance_ = NULL;

ForwardRendezvousRequest* ForwardRendezvousRequest::New() const {
  return new ForwardRendezvousRequest;
}

void ForwardRendezvousRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_receiver_endpoint()) {
      if (receiver_endpoint_ != NULL) receiver_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardRendezvousRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.transport.protobuf.Endpoint receiver_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardRendezvousRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.transport.protobuf.Endpoint receiver_endpoint = 1;
  if (has_receiver_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->receiver_endpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardRendezvousRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.transport.protobuf.Endpoint receiver_endpoint = 1;
  if (has_receiver_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->receiver_endpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardRendezvousRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.transport.protobuf.Endpoint receiver_endpoint = 1;
    if (has_receiver_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver_endpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardRendezvousRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardRendezvousRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardRendezvousRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardRendezvousRequest::MergeFrom(const ForwardRendezvousRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver_endpoint()) {
      mutable_receiver_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.receiver_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardRendezvousRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardRendezvousRequest::CopyFrom(const ForwardRendezvousRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRendezvousRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_receiver_endpoint()) {
    if (!this->receiver_endpoint().IsInitialized()) return false;
  }
  return true;
}

void ForwardRendezvousRequest::Swap(ForwardRendezvousRequest* other) {
  if (other != this) {
    std::swap(receiver_endpoint_, other->receiver_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardRendezvousRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardRendezvousRequest_descriptor_;
  metadata.reflection = ForwardRendezvousRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardRendezvousResponse::kReceiverRendezvousEndpointFieldNumber;
#endif  // !_MSC_VER

ForwardRendezvousResponse::ForwardRendezvousResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardRendezvousResponse::InitAsDefaultInstance() {
  receiver_rendezvous_endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

ForwardRendezvousResponse::ForwardRendezvousResponse(const ForwardRendezvousResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardRendezvousResponse::SharedCtor() {
  _cached_size_ = 0;
  receiver_rendezvous_endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardRendezvousResponse::~ForwardRendezvousResponse() {
  SharedDtor();
}

void ForwardRendezvousResponse::SharedDtor() {
  if (this != default_instance_) {
    delete receiver_rendezvous_endpoint_;
  }
}

void ForwardRendezvousResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardRendezvousResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardRendezvousResponse_descriptor_;
}

const ForwardRendezvousResponse& ForwardRendezvousResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

ForwardRendezvousResponse* ForwardRendezvousResponse::default_instance_ = NULL;

ForwardRendezvousResponse* ForwardRendezvousResponse::New() const {
  return new ForwardRendezvousResponse;
}

void ForwardRendezvousResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_receiver_rendezvous_endpoint()) {
      if (receiver_rendezvous_endpoint_ != NULL) receiver_rendezvous_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardRendezvousResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.transport.protobuf.Endpoint receiver_rendezvous_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_rendezvous_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardRendezvousResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.transport.protobuf.Endpoint receiver_rendezvous_endpoint = 1;
  if (has_receiver_rendezvous_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->receiver_rendezvous_endpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardRendezvousResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.transport.protobuf.Endpoint receiver_rendezvous_endpoint = 1;
  if (has_receiver_rendezvous_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->receiver_rendezvous_endpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardRendezvousResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.transport.protobuf.Endpoint receiver_rendezvous_endpoint = 1;
    if (has_receiver_rendezvous_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver_rendezvous_endpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardRendezvousResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardRendezvousResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardRendezvousResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardRendezvousResponse::MergeFrom(const ForwardRendezvousResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver_rendezvous_endpoint()) {
      mutable_receiver_rendezvous_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.receiver_rendezvous_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardRendezvousResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardRendezvousResponse::CopyFrom(const ForwardRendezvousResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRendezvousResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_receiver_rendezvous_endpoint()) {
    if (!this->receiver_rendezvous_endpoint().IsInitialized()) return false;
  }
  return true;
}

void ForwardRendezvousResponse::Swap(ForwardRendezvousResponse* other) {
  if (other != this) {
    std::swap(receiver_rendezvous_endpoint_, other->receiver_rendezvous_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardRendezvousResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardRendezvousResponse_descriptor_;
  metadata.reflection = ForwardRendezvousResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RendezvousRequest::kProxyEndpointFieldNumber;
#endif  // !_MSC_VER

RendezvousRequest::RendezvousRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RendezvousRequest::InitAsDefaultInstance() {
  proxy_endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

RendezvousRequest::RendezvousRequest(const RendezvousRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RendezvousRequest::SharedCtor() {
  _cached_size_ = 0;
  proxy_endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendezvousRequest::~RendezvousRequest() {
  SharedDtor();
}

void RendezvousRequest::SharedDtor() {
  if (this != default_instance_) {
    delete proxy_endpoint_;
  }
}

void RendezvousRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendezvousRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendezvousRequest_descriptor_;
}

const RendezvousRequest& RendezvousRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

RendezvousRequest* RendezvousRequest::default_instance_ = NULL;

RendezvousRequest* RendezvousRequest::New() const {
  return new RendezvousRequest;
}

void RendezvousRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proxy_endpoint()) {
      if (proxy_endpoint_ != NULL) proxy_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RendezvousRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.transport.protobuf.Endpoint proxy_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RendezvousRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.transport.protobuf.Endpoint proxy_endpoint = 1;
  if (has_proxy_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->proxy_endpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RendezvousRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.transport.protobuf.Endpoint proxy_endpoint = 1;
  if (has_proxy_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proxy_endpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RendezvousRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.transport.protobuf.Endpoint proxy_endpoint = 1;
    if (has_proxy_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxy_endpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendezvousRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RendezvousRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RendezvousRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RendezvousRequest::MergeFrom(const RendezvousRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proxy_endpoint()) {
      mutable_proxy_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.proxy_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RendezvousRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendezvousRequest::CopyFrom(const RendezvousRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendezvousRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_proxy_endpoint()) {
    if (!this->proxy_endpoint().IsInitialized()) return false;
  }
  return true;
}

void RendezvousRequest::Swap(RendezvousRequest* other) {
  if (other != this) {
    std::swap(proxy_endpoint_, other->proxy_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RendezvousRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendezvousRequest_descriptor_;
  metadata.reflection = RendezvousRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RendezvousAcknowledgement::kOriginatorEndpointFieldNumber;
#endif  // !_MSC_VER

RendezvousAcknowledgement::RendezvousAcknowledgement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RendezvousAcknowledgement::InitAsDefaultInstance() {
  originator_endpoint_ = const_cast< ::maidsafe::transport::protobuf::Endpoint*>(&::maidsafe::transport::protobuf::Endpoint::default_instance());
}

RendezvousAcknowledgement::RendezvousAcknowledgement(const RendezvousAcknowledgement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RendezvousAcknowledgement::SharedCtor() {
  _cached_size_ = 0;
  originator_endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendezvousAcknowledgement::~RendezvousAcknowledgement() {
  SharedDtor();
}

void RendezvousAcknowledgement::SharedDtor() {
  if (this != default_instance_) {
    delete originator_endpoint_;
  }
}

void RendezvousAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendezvousAcknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendezvousAcknowledgement_descriptor_;
}

const RendezvousAcknowledgement& RendezvousAcknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();  return *default_instance_;
}

RendezvousAcknowledgement* RendezvousAcknowledgement::default_instance_ = NULL;

RendezvousAcknowledgement* RendezvousAcknowledgement::New() const {
  return new RendezvousAcknowledgement;
}

void RendezvousAcknowledgement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_originator_endpoint()) {
      if (originator_endpoint_ != NULL) originator_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RendezvousAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maidsafe.transport.protobuf.Endpoint originator_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originator_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RendezvousAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maidsafe.transport.protobuf.Endpoint originator_endpoint = 1;
  if (has_originator_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->originator_endpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RendezvousAcknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.transport.protobuf.Endpoint originator_endpoint = 1;
  if (has_originator_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->originator_endpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RendezvousAcknowledgement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.transport.protobuf.Endpoint originator_endpoint = 1;
    if (has_originator_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originator_endpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendezvousAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RendezvousAcknowledgement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RendezvousAcknowledgement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RendezvousAcknowledgement::MergeFrom(const RendezvousAcknowledgement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_originator_endpoint()) {
      mutable_originator_endpoint()->::maidsafe::transport::protobuf::Endpoint::MergeFrom(from.originator_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RendezvousAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendezvousAcknowledgement::CopyFrom(const RendezvousAcknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendezvousAcknowledgement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_originator_endpoint()) {
    if (!this->originator_endpoint().IsInitialized()) return false;
  }
  return true;
}

void RendezvousAcknowledgement::Swap(RendezvousAcknowledgement* other) {
  if (other != this) {
    std::swap(originator_endpoint_, other->originator_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RendezvousAcknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendezvousAcknowledgement_descriptor_;
  metadata.reflection = RendezvousAcknowledgement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)
