// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/transport/transport.proto

#ifndef PROTOBUF_maidsafe_2ftransport_2ftransport_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2ftransport_2ftransport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace transport {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();

class Endpoint;
class Contact;
class ConnectRequest;
class ConnectResponse;
class WrapperMessage;
class ManagedEndpointMessage;
class NatDetectionRequest;
class NatDetectionResponse;
class ProxyConnectRequest;
class ProxyConnectResponse;
class ForwardRendezvousRequest;
class ForwardRendezvousResponse;
class RendezvousRequest;
class RendezvousAcknowledgement;

// ===================================================================

class Endpoint : public ::google::protobuf::Message {
 public:
  Endpoint();
  virtual ~Endpoint();
  
  Endpoint(const Endpoint& from);
  
  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Endpoint& default_instance();
  
  void Swap(Endpoint* other);
  
  // implements Message ----------------------------------------------
  
  Endpoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.Endpoint)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static Endpoint* default_instance_;
};
// -------------------------------------------------------------------

class Contact : public ::google::protobuf::Message {
 public:
  Contact();
  virtual ~Contact();
  
  Contact(const Contact& from);
  
  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();
  
  void Swap(Contact* other);
  
  // implements Message ----------------------------------------------
  
  Contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_endpoint();
  
  // repeated bytes local_ips = 2;
  inline int local_ips_size() const;
  inline void clear_local_ips();
  static const int kLocalIpsFieldNumber = 2;
  inline const ::std::string& local_ips(int index) const;
  inline ::std::string* mutable_local_ips(int index);
  inline void set_local_ips(int index, const ::std::string& value);
  inline void set_local_ips(int index, const char* value);
  inline void set_local_ips(int index, const void* value, size_t size);
  inline ::std::string* add_local_ips();
  inline void add_local_ips(const ::std::string& value);
  inline void add_local_ips(const char* value);
  inline void add_local_ips(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& local_ips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_local_ips();
  
  // optional int32 local_port = 3;
  inline bool has_local_port() const;
  inline void clear_local_port();
  static const int kLocalPortFieldNumber = 3;
  inline ::google::protobuf::int32 local_port() const;
  inline void set_local_port(::google::protobuf::int32 value);
  
  // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 4;
  inline bool has_rendezvous() const;
  inline void clear_rendezvous();
  static const int kRendezvousFieldNumber = 4;
  inline const ::maidsafe::transport::protobuf::Endpoint& rendezvous() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_rendezvous();
  inline ::maidsafe::transport::protobuf::Endpoint* release_rendezvous();
  
  // optional bool tcp443 = 5;
  inline bool has_tcp443() const;
  inline void clear_tcp443();
  static const int kTcp443FieldNumber = 5;
  inline bool tcp443() const;
  inline void set_tcp443(bool value);
  
  // optional bool tcp80 = 6;
  inline bool has_tcp80() const;
  inline void clear_tcp80();
  static const int kTcp80FieldNumber = 6;
  inline bool tcp80() const;
  inline void set_tcp80(bool value);
  
  // optional bool prefer_local = 7;
  inline bool has_prefer_local() const;
  inline void clear_prefer_local();
  static const int kPreferLocalFieldNumber = 7;
  inline bool prefer_local() const;
  inline void set_prefer_local(bool value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.Contact)
 private:
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_local_port();
  inline void clear_has_local_port();
  inline void set_has_rendezvous();
  inline void clear_has_rendezvous();
  inline void set_has_tcp443();
  inline void clear_has_tcp443();
  inline void set_has_tcp80();
  inline void clear_has_tcp80();
  inline void set_has_prefer_local();
  inline void clear_has_prefer_local();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* endpoint_;
  ::google::protobuf::RepeatedPtrField< ::std::string> local_ips_;
  ::maidsafe::transport::protobuf::Endpoint* rendezvous_;
  ::google::protobuf::int32 local_port_;
  bool tcp443_;
  bool tcp80_;
  bool prefer_local_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();
  
  ConnectRequest(const ConnectRequest& from);
  
  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();
  
  void Swap(ConnectRequest* other);
  
  // implements Message ----------------------------------------------
  
  ConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool rendezvous = 1;
  inline bool has_rendezvous() const;
  inline void clear_rendezvous();
  static const int kRendezvousFieldNumber = 1;
  inline bool rendezvous() const;
  inline void set_rendezvous(bool value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ConnectRequest)
 private:
  inline void set_has_rendezvous();
  inline void clear_has_rendezvous();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool rendezvous_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConnectResponse : public ::google::protobuf::Message {
 public:
  ConnectResponse();
  virtual ~ConnectResponse();
  
  ConnectResponse(const ConnectResponse& from);
  
  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectResponse& default_instance();
  
  void Swap(ConnectResponse* other);
  
  // implements Message ----------------------------------------------
  
  ConnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool rendezvous = 1;
  inline bool has_rendezvous() const;
  inline void clear_rendezvous();
  static const int kRendezvousFieldNumber = 1;
  inline bool rendezvous() const;
  inline void set_rendezvous(bool value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ConnectResponse)
 private:
  inline void set_has_rendezvous();
  inline void clear_has_rendezvous();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool rendezvous_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ConnectResponse* default_instance_;
};
// -------------------------------------------------------------------

class WrapperMessage : public ::google::protobuf::Message {
 public:
  WrapperMessage();
  virtual ~WrapperMessage();
  
  WrapperMessage(const WrapperMessage& from);
  
  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WrapperMessage& default_instance();
  
  void Swap(WrapperMessage* other);
  
  // implements Message ----------------------------------------------
  
  WrapperMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WrapperMessage& from);
  void MergeFrom(const WrapperMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline ::google::protobuf::int32 msg_type() const;
  inline void set_msg_type(::google::protobuf::int32 value);
  
  // required bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // optional bytes message_signature = 3;
  inline bool has_message_signature() const;
  inline void clear_message_signature();
  static const int kMessageSignatureFieldNumber = 3;
  inline const ::std::string& message_signature() const;
  inline void set_message_signature(const ::std::string& value);
  inline void set_message_signature(const char* value);
  inline void set_message_signature(const void* value, size_t size);
  inline ::std::string* mutable_message_signature();
  inline ::std::string* release_message_signature();
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.WrapperMessage)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_message_signature();
  inline void clear_has_message_signature();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* payload_;
  ::std::string* message_signature_;
  ::google::protobuf::int32 msg_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static WrapperMessage* default_instance_;
};
// -------------------------------------------------------------------

class ManagedEndpointMessage : public ::google::protobuf::Message {
 public:
  ManagedEndpointMessage();
  virtual ~ManagedEndpointMessage();
  
  ManagedEndpointMessage(const ManagedEndpointMessage& from);
  
  inline ManagedEndpointMessage& operator=(const ManagedEndpointMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagedEndpointMessage& default_instance();
  
  void Swap(ManagedEndpointMessage* other);
  
  // implements Message ----------------------------------------------
  
  ManagedEndpointMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManagedEndpointMessage& from);
  void MergeFrom(const ManagedEndpointMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_endpoint();
  
  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int32 message_id = 3;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);
  
  // optional bytes identifier = 4;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 4;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const void* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // optional int32 frequency = 5;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 5;
  inline ::google::protobuf::int32 frequency() const;
  inline void set_frequency(::google::protobuf::int32 value);
  
  // optional int32 retry_count = 6;
  inline bool has_retry_count() const;
  inline void clear_retry_count();
  static const int kRetryCountFieldNumber = 6;
  inline ::google::protobuf::int32 retry_count() const;
  inline void set_retry_count(::google::protobuf::int32 value);
  
  // optional int32 retry_frequency = 7;
  inline bool has_retry_frequency() const;
  inline void clear_retry_frequency();
  static const int kRetryFrequencyFieldNumber = 7;
  inline ::google::protobuf::int32 retry_frequency() const;
  inline void set_retry_frequency(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ManagedEndpointMessage)
 private:
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_retry_count();
  inline void clear_has_retry_count();
  inline void set_has_retry_frequency();
  inline void clear_has_retry_frequency();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* endpoint_;
  bool result_;
  ::google::protobuf::int32 message_id_;
  ::std::string* identifier_;
  ::google::protobuf::int32 frequency_;
  ::google::protobuf::int32 retry_count_;
  ::google::protobuf::int32 retry_frequency_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ManagedEndpointMessage* default_instance_;
};
// -------------------------------------------------------------------

class NatDetectionRequest : public ::google::protobuf::Message {
 public:
  NatDetectionRequest();
  virtual ~NatDetectionRequest();
  
  NatDetectionRequest(const NatDetectionRequest& from);
  
  inline NatDetectionRequest& operator=(const NatDetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NatDetectionRequest& default_instance();
  
  void Swap(NatDetectionRequest* other);
  
  // implements Message ----------------------------------------------
  
  NatDetectionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NatDetectionRequest& from);
  void MergeFrom(const NatDetectionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes local_ips = 1;
  inline int local_ips_size() const;
  inline void clear_local_ips();
  static const int kLocalIpsFieldNumber = 1;
  inline const ::std::string& local_ips(int index) const;
  inline ::std::string* mutable_local_ips(int index);
  inline void set_local_ips(int index, const ::std::string& value);
  inline void set_local_ips(int index, const char* value);
  inline void set_local_ips(int index, const void* value, size_t size);
  inline ::std::string* add_local_ips();
  inline void add_local_ips(const ::std::string& value);
  inline void add_local_ips(const char* value);
  inline void add_local_ips(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& local_ips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_local_ips();
  
  // required int32 local_port = 2;
  inline bool has_local_port() const;
  inline void clear_local_port();
  static const int kLocalPortFieldNumber = 2;
  inline ::google::protobuf::int32 local_port() const;
  inline void set_local_port(::google::protobuf::int32 value);
  
  // optional bool full_detection = 3;
  inline bool has_full_detection() const;
  inline void clear_full_detection();
  static const int kFullDetectionFieldNumber = 3;
  inline bool full_detection() const;
  inline void set_full_detection(bool value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.NatDetectionRequest)
 private:
  inline void set_has_local_port();
  inline void clear_has_local_port();
  inline void set_has_full_detection();
  inline void clear_has_full_detection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> local_ips_;
  ::google::protobuf::int32 local_port_;
  bool full_detection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static NatDetectionRequest* default_instance_;
};
// -------------------------------------------------------------------

class NatDetectionResponse : public ::google::protobuf::Message {
 public:
  NatDetectionResponse();
  virtual ~NatDetectionResponse();
  
  NatDetectionResponse(const NatDetectionResponse& from);
  
  inline NatDetectionResponse& operator=(const NatDetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NatDetectionResponse& default_instance();
  
  void Swap(NatDetectionResponse* other);
  
  // implements Message ----------------------------------------------
  
  NatDetectionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NatDetectionResponse& from);
  void MergeFrom(const NatDetectionResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_endpoint();
  
  // required int32 nat_type = 2;
  inline bool has_nat_type() const;
  inline void clear_nat_type();
  static const int kNatTypeFieldNumber = 2;
  inline ::google::protobuf::int32 nat_type() const;
  inline void set_nat_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.NatDetectionResponse)
 private:
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_nat_type();
  inline void clear_has_nat_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* endpoint_;
  ::google::protobuf::int32 nat_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static NatDetectionResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProxyConnectRequest : public ::google::protobuf::Message {
 public:
  ProxyConnectRequest();
  virtual ~ProxyConnectRequest();
  
  ProxyConnectRequest(const ProxyConnectRequest& from);
  
  inline ProxyConnectRequest& operator=(const ProxyConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProxyConnectRequest& default_instance();
  
  void Swap(ProxyConnectRequest* other);
  
  // implements Message ----------------------------------------------
  
  ProxyConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProxyConnectRequest& from);
  void MergeFrom(const ProxyConnectRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .maidsafe.transport.protobuf.Endpoint endpoint = 1;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_endpoint();
  
  // required bool rendezvous_connect = 2;
  inline bool has_rendezvous_connect() const;
  inline void clear_rendezvous_connect();
  static const int kRendezvousConnectFieldNumber = 2;
  inline bool rendezvous_connect() const;
  inline void set_rendezvous_connect(bool value);
  
  // optional .maidsafe.transport.protobuf.Endpoint rendezvous = 3;
  inline bool has_rendezvous() const;
  inline void clear_rendezvous();
  static const int kRendezvousFieldNumber = 3;
  inline const ::maidsafe::transport::protobuf::Endpoint& rendezvous() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_rendezvous();
  inline ::maidsafe::transport::protobuf::Endpoint* release_rendezvous();
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ProxyConnectRequest)
 private:
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_rendezvous_connect();
  inline void clear_has_rendezvous_connect();
  inline void set_has_rendezvous();
  inline void clear_has_rendezvous();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* endpoint_;
  ::maidsafe::transport::protobuf::Endpoint* rendezvous_;
  bool rendezvous_connect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ProxyConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProxyConnectResponse : public ::google::protobuf::Message {
 public:
  ProxyConnectResponse();
  virtual ~ProxyConnectResponse();
  
  ProxyConnectResponse(const ProxyConnectResponse& from);
  
  inline ProxyConnectResponse& operator=(const ProxyConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProxyConnectResponse& default_instance();
  
  void Swap(ProxyConnectResponse* other);
  
  // implements Message ----------------------------------------------
  
  ProxyConnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProxyConnectResponse& from);
  void MergeFrom(const ProxyConnectResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ProxyConnectResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ProxyConnectResponse* default_instance_;
};
// -------------------------------------------------------------------

class ForwardRendezvousRequest : public ::google::protobuf::Message {
 public:
  ForwardRendezvousRequest();
  virtual ~ForwardRendezvousRequest();
  
  ForwardRendezvousRequest(const ForwardRendezvousRequest& from);
  
  inline ForwardRendezvousRequest& operator=(const ForwardRendezvousRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardRendezvousRequest& default_instance();
  
  void Swap(ForwardRendezvousRequest* other);
  
  // implements Message ----------------------------------------------
  
  ForwardRendezvousRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardRendezvousRequest& from);
  void MergeFrom(const ForwardRendezvousRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .maidsafe.transport.protobuf.Endpoint receiver_endpoint = 1;
  inline bool has_receiver_endpoint() const;
  inline void clear_receiver_endpoint();
  static const int kReceiverEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& receiver_endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_receiver_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_receiver_endpoint();
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ForwardRendezvousRequest)
 private:
  inline void set_has_receiver_endpoint();
  inline void clear_has_receiver_endpoint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* receiver_endpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ForwardRendezvousRequest* default_instance_;
};
// -------------------------------------------------------------------

class ForwardRendezvousResponse : public ::google::protobuf::Message {
 public:
  ForwardRendezvousResponse();
  virtual ~ForwardRendezvousResponse();
  
  ForwardRendezvousResponse(const ForwardRendezvousResponse& from);
  
  inline ForwardRendezvousResponse& operator=(const ForwardRendezvousResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardRendezvousResponse& default_instance();
  
  void Swap(ForwardRendezvousResponse* other);
  
  // implements Message ----------------------------------------------
  
  ForwardRendezvousResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardRendezvousResponse& from);
  void MergeFrom(const ForwardRendezvousResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .maidsafe.transport.protobuf.Endpoint receiver_rendezvous_endpoint = 1;
  inline bool has_receiver_rendezvous_endpoint() const;
  inline void clear_receiver_rendezvous_endpoint();
  static const int kReceiverRendezvousEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& receiver_rendezvous_endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_receiver_rendezvous_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_receiver_rendezvous_endpoint();
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.ForwardRendezvousResponse)
 private:
  inline void set_has_receiver_rendezvous_endpoint();
  inline void clear_has_receiver_rendezvous_endpoint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* receiver_rendezvous_endpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static ForwardRendezvousResponse* default_instance_;
};
// -------------------------------------------------------------------

class RendezvousRequest : public ::google::protobuf::Message {
 public:
  RendezvousRequest();
  virtual ~RendezvousRequest();
  
  RendezvousRequest(const RendezvousRequest& from);
  
  inline RendezvousRequest& operator=(const RendezvousRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RendezvousRequest& default_instance();
  
  void Swap(RendezvousRequest* other);
  
  // implements Message ----------------------------------------------
  
  RendezvousRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RendezvousRequest& from);
  void MergeFrom(const RendezvousRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .maidsafe.transport.protobuf.Endpoint proxy_endpoint = 1;
  inline bool has_proxy_endpoint() const;
  inline void clear_proxy_endpoint();
  static const int kProxyEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& proxy_endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_proxy_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_proxy_endpoint();
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.RendezvousRequest)
 private:
  inline void set_has_proxy_endpoint();
  inline void clear_has_proxy_endpoint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* proxy_endpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static RendezvousRequest* default_instance_;
};
// -------------------------------------------------------------------

class RendezvousAcknowledgement : public ::google::protobuf::Message {
 public:
  RendezvousAcknowledgement();
  virtual ~RendezvousAcknowledgement();
  
  RendezvousAcknowledgement(const RendezvousAcknowledgement& from);
  
  inline RendezvousAcknowledgement& operator=(const RendezvousAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RendezvousAcknowledgement& default_instance();
  
  void Swap(RendezvousAcknowledgement* other);
  
  // implements Message ----------------------------------------------
  
  RendezvousAcknowledgement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RendezvousAcknowledgement& from);
  void MergeFrom(const RendezvousAcknowledgement& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .maidsafe.transport.protobuf.Endpoint originator_endpoint = 1;
  inline bool has_originator_endpoint() const;
  inline void clear_originator_endpoint();
  static const int kOriginatorEndpointFieldNumber = 1;
  inline const ::maidsafe::transport::protobuf::Endpoint& originator_endpoint() const;
  inline ::maidsafe::transport::protobuf::Endpoint* mutable_originator_endpoint();
  inline ::maidsafe::transport::protobuf::Endpoint* release_originator_endpoint();
  
  // @@protoc_insertion_point(class_scope:maidsafe.transport.protobuf.RendezvousAcknowledgement)
 private:
  inline void set_has_originator_endpoint();
  inline void clear_has_originator_endpoint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::maidsafe::transport::protobuf::Endpoint* originator_endpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2ftransport_2ftransport_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2ftransport_2ftransport_2eproto();
  
  void InitAsDefaultInstance();
  static RendezvousAcknowledgement* default_instance_;
};
// ===================================================================


// ===================================================================

// Endpoint

// required bytes ip = 1;
inline bool Endpoint::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Endpoint::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Endpoint::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Endpoint::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Endpoint::ip() const {
  return *ip_;
}
inline void Endpoint::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Endpoint::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Endpoint::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Endpoint::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Endpoint::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 2;
inline bool Endpoint::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Endpoint::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Endpoint::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Endpoint::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Endpoint::port() const {
  return port_;
}
inline void Endpoint::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Contact

// optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
inline bool Contact::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& Contact::endpoint() const {
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* Contact::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* Contact::release_endpoint() {
  clear_has_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}

// repeated bytes local_ips = 2;
inline int Contact::local_ips_size() const {
  return local_ips_.size();
}
inline void Contact::clear_local_ips() {
  local_ips_.Clear();
}
inline const ::std::string& Contact::local_ips(int index) const {
  return local_ips_.Get(index);
}
inline ::std::string* Contact::mutable_local_ips(int index) {
  return local_ips_.Mutable(index);
}
inline void Contact::set_local_ips(int index, const ::std::string& value) {
  local_ips_.Mutable(index)->assign(value);
}
inline void Contact::set_local_ips(int index, const char* value) {
  local_ips_.Mutable(index)->assign(value);
}
inline void Contact::set_local_ips(int index, const void* value, size_t size) {
  local_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::add_local_ips() {
  return local_ips_.Add();
}
inline void Contact::add_local_ips(const ::std::string& value) {
  local_ips_.Add()->assign(value);
}
inline void Contact::add_local_ips(const char* value) {
  local_ips_.Add()->assign(value);
}
inline void Contact::add_local_ips(const void* value, size_t size) {
  local_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Contact::local_ips() const {
  return local_ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Contact::mutable_local_ips() {
  return &local_ips_;
}

// optional int32 local_port = 3;
inline bool Contact::has_local_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contact::set_has_local_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contact::clear_has_local_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contact::clear_local_port() {
  local_port_ = 0;
  clear_has_local_port();
}
inline ::google::protobuf::int32 Contact::local_port() const {
  return local_port_;
}
inline void Contact::set_local_port(::google::protobuf::int32 value) {
  set_has_local_port();
  local_port_ = value;
}

// optional .maidsafe.transport.protobuf.Endpoint rendezvous = 4;
inline bool Contact::has_rendezvous() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact::set_has_rendezvous() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact::clear_has_rendezvous() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contact::clear_rendezvous() {
  if (rendezvous_ != NULL) rendezvous_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_rendezvous();
}
inline const ::maidsafe::transport::protobuf::Endpoint& Contact::rendezvous() const {
  return rendezvous_ != NULL ? *rendezvous_ : *default_instance_->rendezvous_;
}
inline ::maidsafe::transport::protobuf::Endpoint* Contact::mutable_rendezvous() {
  set_has_rendezvous();
  if (rendezvous_ == NULL) rendezvous_ = new ::maidsafe::transport::protobuf::Endpoint;
  return rendezvous_;
}
inline ::maidsafe::transport::protobuf::Endpoint* Contact::release_rendezvous() {
  clear_has_rendezvous();
  ::maidsafe::transport::protobuf::Endpoint* temp = rendezvous_;
  rendezvous_ = NULL;
  return temp;
}

// optional bool tcp443 = 5;
inline bool Contact::has_tcp443() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Contact::set_has_tcp443() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Contact::clear_has_tcp443() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Contact::clear_tcp443() {
  tcp443_ = false;
  clear_has_tcp443();
}
inline bool Contact::tcp443() const {
  return tcp443_;
}
inline void Contact::set_tcp443(bool value) {
  set_has_tcp443();
  tcp443_ = value;
}

// optional bool tcp80 = 6;
inline bool Contact::has_tcp80() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Contact::set_has_tcp80() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Contact::clear_has_tcp80() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Contact::clear_tcp80() {
  tcp80_ = false;
  clear_has_tcp80();
}
inline bool Contact::tcp80() const {
  return tcp80_;
}
inline void Contact::set_tcp80(bool value) {
  set_has_tcp80();
  tcp80_ = value;
}

// optional bool prefer_local = 7;
inline bool Contact::has_prefer_local() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Contact::set_has_prefer_local() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Contact::clear_has_prefer_local() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Contact::clear_prefer_local() {
  prefer_local_ = false;
  clear_has_prefer_local();
}
inline bool Contact::prefer_local() const {
  return prefer_local_;
}
inline void Contact::set_prefer_local(bool value) {
  set_has_prefer_local();
  prefer_local_ = value;
}

// -------------------------------------------------------------------

// ConnectRequest

// required bool rendezvous = 1;
inline bool ConnectRequest::has_rendezvous() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectRequest::set_has_rendezvous() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectRequest::clear_has_rendezvous() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectRequest::clear_rendezvous() {
  rendezvous_ = false;
  clear_has_rendezvous();
}
inline bool ConnectRequest::rendezvous() const {
  return rendezvous_;
}
inline void ConnectRequest::set_rendezvous(bool value) {
  set_has_rendezvous();
  rendezvous_ = value;
}

// -------------------------------------------------------------------

// ConnectResponse

// required bool rendezvous = 1;
inline bool ConnectResponse::has_rendezvous() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectResponse::set_has_rendezvous() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectResponse::clear_has_rendezvous() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectResponse::clear_rendezvous() {
  rendezvous_ = false;
  clear_has_rendezvous();
}
inline bool ConnectResponse::rendezvous() const {
  return rendezvous_;
}
inline void ConnectResponse::set_rendezvous(bool value) {
  set_has_rendezvous();
  rendezvous_ = value;
}

// -------------------------------------------------------------------

// WrapperMessage

// required int32 msg_type = 1;
inline bool WrapperMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WrapperMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WrapperMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WrapperMessage::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::google::protobuf::int32 WrapperMessage::msg_type() const {
  return msg_type_;
}
inline void WrapperMessage::set_msg_type(::google::protobuf::int32 value) {
  set_has_msg_type();
  msg_type_ = value;
}

// required bytes payload = 2;
inline bool WrapperMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WrapperMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WrapperMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WrapperMessage::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& WrapperMessage::payload() const {
  return *payload_;
}
inline void WrapperMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void WrapperMessage::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void WrapperMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WrapperMessage::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* WrapperMessage::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes message_signature = 3;
inline bool WrapperMessage::has_message_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WrapperMessage::set_has_message_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WrapperMessage::clear_has_message_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WrapperMessage::clear_message_signature() {
  if (message_signature_ != &::google::protobuf::internal::kEmptyString) {
    message_signature_->clear();
  }
  clear_has_message_signature();
}
inline const ::std::string& WrapperMessage::message_signature() const {
  return *message_signature_;
}
inline void WrapperMessage::set_message_signature(const ::std::string& value) {
  set_has_message_signature();
  if (message_signature_ == &::google::protobuf::internal::kEmptyString) {
    message_signature_ = new ::std::string;
  }
  message_signature_->assign(value);
}
inline void WrapperMessage::set_message_signature(const char* value) {
  set_has_message_signature();
  if (message_signature_ == &::google::protobuf::internal::kEmptyString) {
    message_signature_ = new ::std::string;
  }
  message_signature_->assign(value);
}
inline void WrapperMessage::set_message_signature(const void* value, size_t size) {
  set_has_message_signature();
  if (message_signature_ == &::google::protobuf::internal::kEmptyString) {
    message_signature_ = new ::std::string;
  }
  message_signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WrapperMessage::mutable_message_signature() {
  set_has_message_signature();
  if (message_signature_ == &::google::protobuf::internal::kEmptyString) {
    message_signature_ = new ::std::string;
  }
  return message_signature_;
}
inline ::std::string* WrapperMessage::release_message_signature() {
  clear_has_message_signature();
  if (message_signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_signature_;
    message_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ManagedEndpointMessage

// optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
inline bool ManagedEndpointMessage::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagedEndpointMessage::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManagedEndpointMessage::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManagedEndpointMessage::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& ManagedEndpointMessage::endpoint() const {
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ManagedEndpointMessage::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ManagedEndpointMessage::release_endpoint() {
  clear_has_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}

// optional bool result = 2;
inline bool ManagedEndpointMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManagedEndpointMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManagedEndpointMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManagedEndpointMessage::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool ManagedEndpointMessage::result() const {
  return result_;
}
inline void ManagedEndpointMessage::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional int32 message_id = 3;
inline bool ManagedEndpointMessage::has_message_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManagedEndpointMessage::set_has_message_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManagedEndpointMessage::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManagedEndpointMessage::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 ManagedEndpointMessage::message_id() const {
  return message_id_;
}
inline void ManagedEndpointMessage::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional bytes identifier = 4;
inline bool ManagedEndpointMessage::has_identifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManagedEndpointMessage::set_has_identifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManagedEndpointMessage::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManagedEndpointMessage::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& ManagedEndpointMessage::identifier() const {
  return *identifier_;
}
inline void ManagedEndpointMessage::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ManagedEndpointMessage::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ManagedEndpointMessage::set_identifier(const void* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedEndpointMessage::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* ManagedEndpointMessage::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 frequency = 5;
inline bool ManagedEndpointMessage::has_frequency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManagedEndpointMessage::set_has_frequency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManagedEndpointMessage::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManagedEndpointMessage::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
inline ::google::protobuf::int32 ManagedEndpointMessage::frequency() const {
  return frequency_;
}
inline void ManagedEndpointMessage::set_frequency(::google::protobuf::int32 value) {
  set_has_frequency();
  frequency_ = value;
}

// optional int32 retry_count = 6;
inline bool ManagedEndpointMessage::has_retry_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManagedEndpointMessage::set_has_retry_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManagedEndpointMessage::clear_has_retry_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManagedEndpointMessage::clear_retry_count() {
  retry_count_ = 0;
  clear_has_retry_count();
}
inline ::google::protobuf::int32 ManagedEndpointMessage::retry_count() const {
  return retry_count_;
}
inline void ManagedEndpointMessage::set_retry_count(::google::protobuf::int32 value) {
  set_has_retry_count();
  retry_count_ = value;
}

// optional int32 retry_frequency = 7;
inline bool ManagedEndpointMessage::has_retry_frequency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManagedEndpointMessage::set_has_retry_frequency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManagedEndpointMessage::clear_has_retry_frequency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManagedEndpointMessage::clear_retry_frequency() {
  retry_frequency_ = 0;
  clear_has_retry_frequency();
}
inline ::google::protobuf::int32 ManagedEndpointMessage::retry_frequency() const {
  return retry_frequency_;
}
inline void ManagedEndpointMessage::set_retry_frequency(::google::protobuf::int32 value) {
  set_has_retry_frequency();
  retry_frequency_ = value;
}

// -------------------------------------------------------------------

// NatDetectionRequest

// repeated bytes local_ips = 1;
inline int NatDetectionRequest::local_ips_size() const {
  return local_ips_.size();
}
inline void NatDetectionRequest::clear_local_ips() {
  local_ips_.Clear();
}
inline const ::std::string& NatDetectionRequest::local_ips(int index) const {
  return local_ips_.Get(index);
}
inline ::std::string* NatDetectionRequest::mutable_local_ips(int index) {
  return local_ips_.Mutable(index);
}
inline void NatDetectionRequest::set_local_ips(int index, const ::std::string& value) {
  local_ips_.Mutable(index)->assign(value);
}
inline void NatDetectionRequest::set_local_ips(int index, const char* value) {
  local_ips_.Mutable(index)->assign(value);
}
inline void NatDetectionRequest::set_local_ips(int index, const void* value, size_t size) {
  local_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NatDetectionRequest::add_local_ips() {
  return local_ips_.Add();
}
inline void NatDetectionRequest::add_local_ips(const ::std::string& value) {
  local_ips_.Add()->assign(value);
}
inline void NatDetectionRequest::add_local_ips(const char* value) {
  local_ips_.Add()->assign(value);
}
inline void NatDetectionRequest::add_local_ips(const void* value, size_t size) {
  local_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NatDetectionRequest::local_ips() const {
  return local_ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NatDetectionRequest::mutable_local_ips() {
  return &local_ips_;
}

// required int32 local_port = 2;
inline bool NatDetectionRequest::has_local_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NatDetectionRequest::set_has_local_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NatDetectionRequest::clear_has_local_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NatDetectionRequest::clear_local_port() {
  local_port_ = 0;
  clear_has_local_port();
}
inline ::google::protobuf::int32 NatDetectionRequest::local_port() const {
  return local_port_;
}
inline void NatDetectionRequest::set_local_port(::google::protobuf::int32 value) {
  set_has_local_port();
  local_port_ = value;
}

// optional bool full_detection = 3;
inline bool NatDetectionRequest::has_full_detection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NatDetectionRequest::set_has_full_detection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NatDetectionRequest::clear_has_full_detection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NatDetectionRequest::clear_full_detection() {
  full_detection_ = false;
  clear_has_full_detection();
}
inline bool NatDetectionRequest::full_detection() const {
  return full_detection_;
}
inline void NatDetectionRequest::set_full_detection(bool value) {
  set_has_full_detection();
  full_detection_ = value;
}

// -------------------------------------------------------------------

// NatDetectionResponse

// optional .maidsafe.transport.protobuf.Endpoint endpoint = 1;
inline bool NatDetectionResponse::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NatDetectionResponse::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NatDetectionResponse::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NatDetectionResponse::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& NatDetectionResponse::endpoint() const {
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* NatDetectionResponse::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* NatDetectionResponse::release_endpoint() {
  clear_has_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}

// required int32 nat_type = 2;
inline bool NatDetectionResponse::has_nat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NatDetectionResponse::set_has_nat_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NatDetectionResponse::clear_has_nat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NatDetectionResponse::clear_nat_type() {
  nat_type_ = 0;
  clear_has_nat_type();
}
inline ::google::protobuf::int32 NatDetectionResponse::nat_type() const {
  return nat_type_;
}
inline void NatDetectionResponse::set_nat_type(::google::protobuf::int32 value) {
  set_has_nat_type();
  nat_type_ = value;
}

// -------------------------------------------------------------------

// ProxyConnectRequest

// required .maidsafe.transport.protobuf.Endpoint endpoint = 1;
inline bool ProxyConnectRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProxyConnectRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProxyConnectRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProxyConnectRequest::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& ProxyConnectRequest::endpoint() const {
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ProxyConnectRequest::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ProxyConnectRequest::release_endpoint() {
  clear_has_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}

// required bool rendezvous_connect = 2;
inline bool ProxyConnectRequest::has_rendezvous_connect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProxyConnectRequest::set_has_rendezvous_connect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProxyConnectRequest::clear_has_rendezvous_connect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProxyConnectRequest::clear_rendezvous_connect() {
  rendezvous_connect_ = false;
  clear_has_rendezvous_connect();
}
inline bool ProxyConnectRequest::rendezvous_connect() const {
  return rendezvous_connect_;
}
inline void ProxyConnectRequest::set_rendezvous_connect(bool value) {
  set_has_rendezvous_connect();
  rendezvous_connect_ = value;
}

// optional .maidsafe.transport.protobuf.Endpoint rendezvous = 3;
inline bool ProxyConnectRequest::has_rendezvous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProxyConnectRequest::set_has_rendezvous() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProxyConnectRequest::clear_has_rendezvous() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProxyConnectRequest::clear_rendezvous() {
  if (rendezvous_ != NULL) rendezvous_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_rendezvous();
}
inline const ::maidsafe::transport::protobuf::Endpoint& ProxyConnectRequest::rendezvous() const {
  return rendezvous_ != NULL ? *rendezvous_ : *default_instance_->rendezvous_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ProxyConnectRequest::mutable_rendezvous() {
  set_has_rendezvous();
  if (rendezvous_ == NULL) rendezvous_ = new ::maidsafe::transport::protobuf::Endpoint;
  return rendezvous_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ProxyConnectRequest::release_rendezvous() {
  clear_has_rendezvous();
  ::maidsafe::transport::protobuf::Endpoint* temp = rendezvous_;
  rendezvous_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProxyConnectResponse

// required bool result = 1;
inline bool ProxyConnectResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProxyConnectResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProxyConnectResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProxyConnectResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool ProxyConnectResponse::result() const {
  return result_;
}
inline void ProxyConnectResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ForwardRendezvousRequest

// required .maidsafe.transport.protobuf.Endpoint receiver_endpoint = 1;
inline bool ForwardRendezvousRequest::has_receiver_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardRendezvousRequest::set_has_receiver_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardRendezvousRequest::clear_has_receiver_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardRendezvousRequest::clear_receiver_endpoint() {
  if (receiver_endpoint_ != NULL) receiver_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_receiver_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& ForwardRendezvousRequest::receiver_endpoint() const {
  return receiver_endpoint_ != NULL ? *receiver_endpoint_ : *default_instance_->receiver_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ForwardRendezvousRequest::mutable_receiver_endpoint() {
  set_has_receiver_endpoint();
  if (receiver_endpoint_ == NULL) receiver_endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return receiver_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ForwardRendezvousRequest::release_receiver_endpoint() {
  clear_has_receiver_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = receiver_endpoint_;
  receiver_endpoint_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ForwardRendezvousResponse

// required .maidsafe.transport.protobuf.Endpoint receiver_rendezvous_endpoint = 1;
inline bool ForwardRendezvousResponse::has_receiver_rendezvous_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardRendezvousResponse::set_has_receiver_rendezvous_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardRendezvousResponse::clear_has_receiver_rendezvous_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardRendezvousResponse::clear_receiver_rendezvous_endpoint() {
  if (receiver_rendezvous_endpoint_ != NULL) receiver_rendezvous_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_receiver_rendezvous_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& ForwardRendezvousResponse::receiver_rendezvous_endpoint() const {
  return receiver_rendezvous_endpoint_ != NULL ? *receiver_rendezvous_endpoint_ : *default_instance_->receiver_rendezvous_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ForwardRendezvousResponse::mutable_receiver_rendezvous_endpoint() {
  set_has_receiver_rendezvous_endpoint();
  if (receiver_rendezvous_endpoint_ == NULL) receiver_rendezvous_endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return receiver_rendezvous_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* ForwardRendezvousResponse::release_receiver_rendezvous_endpoint() {
  clear_has_receiver_rendezvous_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = receiver_rendezvous_endpoint_;
  receiver_rendezvous_endpoint_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RendezvousRequest

// required .maidsafe.transport.protobuf.Endpoint proxy_endpoint = 1;
inline bool RendezvousRequest::has_proxy_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendezvousRequest::set_has_proxy_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendezvousRequest::clear_has_proxy_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendezvousRequest::clear_proxy_endpoint() {
  if (proxy_endpoint_ != NULL) proxy_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_proxy_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& RendezvousRequest::proxy_endpoint() const {
  return proxy_endpoint_ != NULL ? *proxy_endpoint_ : *default_instance_->proxy_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* RendezvousRequest::mutable_proxy_endpoint() {
  set_has_proxy_endpoint();
  if (proxy_endpoint_ == NULL) proxy_endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return proxy_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* RendezvousRequest::release_proxy_endpoint() {
  clear_has_proxy_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = proxy_endpoint_;
  proxy_endpoint_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RendezvousAcknowledgement

// required .maidsafe.transport.protobuf.Endpoint originator_endpoint = 1;
inline bool RendezvousAcknowledgement::has_originator_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendezvousAcknowledgement::set_has_originator_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendezvousAcknowledgement::clear_has_originator_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendezvousAcknowledgement::clear_originator_endpoint() {
  if (originator_endpoint_ != NULL) originator_endpoint_->::maidsafe::transport::protobuf::Endpoint::Clear();
  clear_has_originator_endpoint();
}
inline const ::maidsafe::transport::protobuf::Endpoint& RendezvousAcknowledgement::originator_endpoint() const {
  return originator_endpoint_ != NULL ? *originator_endpoint_ : *default_instance_->originator_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* RendezvousAcknowledgement::mutable_originator_endpoint() {
  set_has_originator_endpoint();
  if (originator_endpoint_ == NULL) originator_endpoint_ = new ::maidsafe::transport::protobuf::Endpoint;
  return originator_endpoint_;
}
inline ::maidsafe::transport::protobuf::Endpoint* RendezvousAcknowledgement::release_originator_endpoint() {
  clear_has_originator_endpoint();
  ::maidsafe::transport::protobuf::Endpoint* temp = originator_endpoint_;
  originator_endpoint_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace maidsafe

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maidsafe_2ftransport_2ftransport_2eproto__INCLUDED
